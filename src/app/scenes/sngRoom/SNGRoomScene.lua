---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 
--- DateTime: 
---
local NormalRoomScene = import("app.scenes.normalRoom").scene
local SNGRoomScene = class("SNGRoomScene",NormalRoomScene)
local DailyTaskManager = import("app.scenes.dailyTask").DailyTaskManager;

function SNGRoomScene:ctor()
    self:bindCtr(require("SNGRoomCtr"))
    NormalRoomScene.ctor(self)
    self.m_sngData = nil
    self.m_ante = "0";
    self.m_userRanking = "0";
    self.m_isMatchStart = false;
    self.m_smallBlind = 0
    self.m_showResultPop = false
    g_RoomInfo.m_isSngMatchEnd = false
end

function SNGRoomScene:onEnter()
    NormalRoomScene.onEnter(self)
    self:watchData()
    self:initSNGView()
    self.m_enableSuperLotto = false
end

function SNGRoomScene:doLogic(funcName, ...)
	if self.mCtr and type(self.mCtr[funcName] == "function") then
		self.mCtr[funcName](self.mCtr,...)
	end
end

SNGRoomScene.s_watchDataList =  {
	--比赛
    {g_ModelCmd.ROOM_MATCH_RANKING,          "matchRanking",      false};
    {g_ModelCmd.ROOM_MATCH_END,              "matchEnd",          false};
    {g_ModelCmd.ROOM_MATCH_CLOSE,            "matchClose",        false};
    {g_ModelCmd.ROOM_BLIND_CHANGE,           "blindChange",       false};
    {g_ModelCmd.ROOM_MATCH_START,            "matchStart",        false};

    --单桌淘汰赛
    {g_ModelCmd.ROOM_TABLE_ID_K,            "tableIdK",          false};
    {g_ModelCmd.ROOM_MATCH_INFO_K,          "matchInfoK",        false};
    {g_ModelCmd.ROOM_USER_OUT_K,            "userOutK",          false};

    {g_ModelCmd.STORE_DISCOUNT,             "discountWatcher",   false};
}

function SNGRoomScene:onCleanup()
	self:unwatchData()
    self.m_isMatchStart = false
    NormalRoomScene.onCleanup(self)

    if self.m_scheduleTask1 then
        g_Schedule:cancel(self.m_scheduleTask1.eventObj)
    end
    g_RoomInfo.m_isSngMatchEnd = false
    g_RoomInfo.m_isSngSwitchRoom = false
end


function SNGRoomScene:watchData()
--	self.m_watchDataList1 = {}
--	---注册监听事件
--	if self.s_watchDataList then
--		for k,v in pairs(self.s_watchDataList) do
--			table.insert(self.m_watchDataList1,{v[1],self,self[v[2]],v[3]})
--		end
--	end
--    g_Model:watchDataList(self.m_watchDataList1);

    g_Model:watchData(g_ModelCmd.ROOM_MATCH_RANKING, self, self.matchRanking, false)
    g_Model:watchData(g_ModelCmd.ROOM_MATCH_END, self, self.matchEnd, false)
    g_Model:watchData(g_ModelCmd.ROOM_MATCH_CLOSE, self, self.matchClose, false)
    g_Model:watchData(g_ModelCmd.ROOM_BLIND_CHANGE, self, self.blindChange, false)
    g_Model:watchData(g_ModelCmd.ROOM_MATCH_START, self, self.matchStart, false)
    g_Model:watchData(g_ModelCmd.ROOM_TABLE_ID_K, self, self.tableIdK, false)
    g_Model:watchData(g_ModelCmd.ROOM_MATCH_INFO_K, self, self.matchInfoK, false)
    g_Model:watchData(g_ModelCmd.ROOM_USER_OUT_K, self, self.userOutK, false)
    g_Model:watchData(g_ModelCmd.STORE_DISCOUNT, self, self.discountWatcher, false)
end

function SNGRoomScene:unwatchData()
--    if self.m_watchDataList1 ~= nil then
--        g_Model:unwatchDataList(self.m_watchDataList1);
--    end
--    self.m_watchDataList1 = nil;
    g_Model:unwatchData(g_ModelCmd.ROOM_MATCH_RANKING, self, self.matchRanking)
    g_Model:unwatchData(g_ModelCmd.ROOM_MATCH_END, self, self.matchEnd)
    g_Model:unwatchData(g_ModelCmd.ROOM_MATCH_CLOSE, self, self.matchClose)
    g_Model:unwatchData(g_ModelCmd.ROOM_BLIND_CHANGE, self, self.blindChange)
    g_Model:unwatchData(g_ModelCmd.ROOM_MATCH_START, self, self.matchStart)
    g_Model:unwatchData(g_ModelCmd.ROOM_TABLE_ID_K, self, self.tableIdK)
    g_Model:unwatchData(g_ModelCmd.ROOM_MATCH_INFO_K, self, self.matchInfoK)
    g_Model:unwatchData(g_ModelCmd.ROOM_USER_OUT_K, self, self.userOutK)
    g_Model:unwatchData(g_ModelCmd.STORE_DISCOUNT, self, self.discountWatcher)
    g_Model:unwatchData(g_ModelCmd.ROOM_GAME_START_DATA, self, self.toChangeBlind)
end
       
function SNGRoomScene:initSNGView()
    --荷官 夺金岛 邀请好友 换桌 老虎机
	--self.m_dealerView:setTouchEnabled(false)
	self.m_dealerView:setTouchEnabled(false)
    self:showStandUpBtn(false)

    local screenSize =  self.m_table:getContentSize()
    self.m_centerNotice = cc.Sprite:create("creator/sngRoom/imgs/bg_center_notice.png")
    self.m_table:addChild(self.m_centerNotice)
    self.m_centerNotice:setPosition(cc.p(screenSize.width/2,screenSize.height/2+80))
    local noticeStr = string.format(GameString.get("str_sng_room_center_notic"),5)
    self.m_noticeTx =  cc.Label:createWithSystemFont(noticeStr, nil, 30, cc.size(0,0), cc.TEXT_ALIGNMENT_CENTER, cc.VERTICAL_TEXT_ALIGNMENT_CENTER)
    self.m_noticeTx:setTextColor(cc.c3b(78,0,6))
    self.m_centerNotice:addChild(self.m_noticeTx)
    g_NodeUtils:arrangeToCenter(self.m_noticeTx,0,5)
    -- self.m_centerNotice:setVisible(false)

    self.m_scheduleTask1 = g_Schedule:schedule(function()
		self:onMatchStatusChanged()
	end,1,1)

end 


function SNGRoomScene:setBankerPos()
	NormalRoomScene.setBankerPos(self)
	if not self.m_isMatchStart then
		self.m_banker:setVisible(false)
	end
end


function SNGRoomScene:hideCenterNotice()
    self.m_centerNotice:setVisible(false)
end

function SNGRoomScene:onMatchStatusChanged()
    self:showStandUpBtn(self.m_seatManager:selfInSeat() and self.m_isMatchStart);
    local maxSeatCount = g_RoomInfo:getMaxSeatCount()
    if self.m_isMatchStart then
        self.m_centerNotice:setVisible(false)
        --self.m_btnStand:setVisible(true)
        --self.m_dealerView:setVisible(true)
    else
        self.m_centerNotice:setVisible(true)
        --self.m_btnStand:setVisible(false)
       -- self.m_dealerView:setVisible(false)
        self.m_noticeTx:setString(string.format(GameString.get("str_sng_room_center_notic"),((maxSeatCount or 5)-#self.m_seatManager:getSitDownSeat())))
    end
end

--坐下且比赛开始，显示站起按钮
function SNGRoomScene:showStandUpBtn(isShow)
    if isShow then
        self.super.showStandUpBtn(self,isShow)        
    end
    self.m_btnStand:setVisible(isShow)
end

--data= {
--     duration = -1;
--     smallBlind = 500000;
--     startTime = -1;
--     tableId = 100501;    
-- }
function SNGRoomScene:tableIdK(data)
    self.m_isMatchStart = data.duration >= 0;
    self:onMatchStatusChanged();--tips状态改变
    self.m_smallBlind = data.smallBlind;
    self:resetRoomInfo();--更新room信息

end

--data ={
--     buyIn = 80000;
--     reward =  {
--         [1] = {"experience" = 8,"coalaa"= 0,"chip" = 360000}
--     };
--     serviceCharge = 8000
-- }
function SNGRoomScene:matchInfoK(data)
    self.m_sngData = data
end

function SNGRoomScene:userOutK(data)
    Log.d("SNGRoomScene:userOutK data = ",data)
    self.m_showResultPop = true
    self:showStandUpBtn(false)
    if data.ranking < 3 then
        g_PopupManager:show(g_PopupConfig.S_POPID.SNG_REWARD_POP,data)
    else
        g_PopupManager:show(g_PopupConfig.S_POPID.SNG_RESULT_POP,data.ranking)        
    end
end

function SNGRoomScene:discountWatcher(data)
    self.m_dis = dis;--有什么用
end

function SNGRoomScene:updateData(data)
    self.m_sngData = data
end

function SNGRoomScene:matchRanking(data)
    self.m_userRanking = data.ranking.."/"..data.count
    self:resetRoomInfo()
end

function SNGRoomScene:matchEnd(data)
    Log.d("SNGRoomScene matchEnd data = ",data)
    if  data then 
        g_RoomInfo.m_isSngMatchEnd = true
        if not self.m_showResultPop then --
            g_AlertDialog.getInstance():setTitle(GameString.get('tips'))
            :setContent(GameString.get("str_sng_match_end"))
            :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
            :setLeftBtnTx(GameString.get("str_sng_reward_pop_back"))
            :setRightBtnTx(GameString.get("str_sng_reward_pop_play_again"))
            :setCloseBtnVisible(false)
            :setRightBtnFunc(function()
                g_EventDispatcher:dispatch(g_SceneEvent.ROOM_SNG_END_PLAY_AGAIN)
            end)
            :setLeftBtnFunc(function()
                g_EventDispatcher:dispatch(g_SceneEvent.ROOM_SNG_END_BACK_TO_LOBBY)
            end)
            :show()
        end
        return 
    end
    self.m_isMatchStart = false
    self:onMatchStatusChanged()
end

function SNGRoomScene:matchClose(data)
    if data then
        -- self:confirmReturn(DialogCallback.CONFIRM);
    end
end

function SNGRoomScene:blindChange(data)
    self.m_newSmallBlind = data;    
    local tipText = g_StringUtils.substitute(GameString.get("str_room_blind_chang"),g_MoneyUtil.formatMoney(self.m_newSmallBlind), g_MoneyUtil.formatMoney(self.m_newSmallBlind * 2));
    self:showTips(tipText)
    g_Model:watchData(g_ModelCmd.ROOM_GAME_START_DATA, self, self.toChangeBlind, false);
end

function SNGRoomScene:toChangeBlind(data)
    g_Model:unwatchData(g_ModelCmd.ROOM_GAME_START_DATA, self, self.toChangeBlind);
    g_RoomInfo:setSmallBlind(self.m_newSmallBlind)
    self.smallBlind = self.m_newSmallBlind;	    
    self:resetRoomInfo();
end

function SNGRoomScene:matchStart(data)
    if(not data) then
        return;
    end
    self.m_showResultPop = false
    g_RoomInfo.m_isSngMatchEnd = false
    self:showTips(GameString.get("str_room_match_start"))
      
    self.m_isMatchStart = true;
    self:onMatchStatusChanged();
    self.m_dealerView:setVisible(true)
end

--data= {
--     duration = -1;
--     smallBlind = 500000;
--     startTime = -1;
--     tableId = 100501;    
-- }
function SNGRoomScene:resetRoomInfo()
    local smallBlind = g_RoomInfo:getSmallBlind()
	local roomInfoText = g_StringLib.substitute(GameString.get("str_room_info_match"),
												self.m_ante or "0",
												g_MoneyUtil.formatMoney(smallBlind or 0),
												g_MoneyUtil.formatMoney((smallBlind * 2) or 0),
                                                self.m_userRanking);
    self.m_infoTx:setString(roomInfoText)
--    self:setBankerPos()
end

function SNGRoomScene:showTips(str)
    g_AlarmTips.getInstance():setText(str):show()
end


function SNGRoomScene:onStandClick()
    self:doLogic("onSngStandClick")
end

function SNGRoomScene:onStand()
    self.m_socketManager:requestStandUp()
end

function SNGRoomScene:onResultPopClose()
    if g_RoomInfo.m_isSngMatchEnd then
        g_AlertDialog.getInstance()
            :setContent(GameString.get("str_sng_match_end"))
            :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
            :setLeftBtnTx(GameString.get("str_sng_reward_pop_back"))
            :setRightBtnTx(GameString.get("str_sng_reward_pop_play_again"))
            :setCloseBtnVisible(false)
            :setRightBtnFunc(function()
                self.m_showResultPop = false
                g_EventDispatcher:dispatch(g_SceneEvent.ROOM_SNG_END_PLAY_AGAIN)
            end)
            :setLeftBtnFunc(function()
                self.m_showResultPop = false
                g_EventDispatcher:dispatch(g_SceneEvent.ROOM_SNG_END_BACK_TO_LOBBY)
            end)
            :show()
    else
        self.m_showResultPop = false
    end
end

function SNGRoomScene:overrideForbidWebEntrance()
    return true
end
--@desc: override 做退出SNG房間提示
function SNGRoomScene:overrideExitRoomTipsIfNeed()
    g_AlertDialog.getInstance():setTitle(GameString.get("tips"))
    :setContent(GameString.get("str_room_leave_match_confirm"))
    :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
    :setLeftBtnTx(GameString.get("str_common_cancel"))
    :setRightBtnTx(GameString.get("str_common_confirm"))
    :setRightBtnFunc(function()
        self:exitRoom()
    end)
    :show()
end

return SNGRoomScene