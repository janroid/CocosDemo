---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by CavanZhou.
--- DateTime: 2018/12/12 16:13
---

local NormalRoomSceneCtr = import("app.scenes.normalRoom").NormalRoomSceneCtr
local MTTRoomSceneCtr = class("MTTRoomSceneCtr",NormalRoomSceneCtr);
local DailyTaskManager = import("app.scenes.dailyTask").DailyTaskManager;


---配置事件监听函数
MTTRoomSceneCtr.s_eventFuncMap =  {
	
	[g_SceneEvent.SHOW_REBUYING_TIPS]			= "showSomeBodyRebuyingTip",--展示有其他用户正在rebuy
	[g_SceneEvent.HIDDEN_REBUYING_TIPS]			= "hiddenSomeBodyRebuyingTip",--展示有其他用户正在rebuy
	[g_SceneEvent.SHOW_MATCH_NOT_START_TIPS]	= "showMatchNotOpenPanel",--提示mtt不开赛
	[g_SceneEvent.NEW_MTT_SEND_ADDON]			= "reqAddon",--发送addon请求 1是同意 0是不同意
	[g_SceneEvent.NEW_MTT_SEND_REBUY]			= "reqRebuy",--发送rebuy请求 1是同意 0是不同意
	[g_SceneEvent.ROOM_MTT_RESULT_POP_CLOSE]    = "onMttResultPopClose", --结算弹窗关闭 显示比赛结束提示
}

MTTRoomSceneCtr.s_watchDataList =  {
	
	{g_ModelCmd.NEW_MTT_CAN_REBUY,              "showRebbyPop",        false};
	{g_ModelCmd.NEW_MTT_CAN_ADDON,              "showAddonPop",        false};
	{g_ModelCmd.ROOM_COUNT_DOWN_TIME_T,         "showCountDownT",      false};
	{g_ModelCmd.ROOM_MATCH_START_TIME_T,        "tournamentStartTime", false};
	{g_ModelCmd.ROOM_USER_OUT_T,                "userOutT",            false};
	
	{g_ModelCmd.NEW_MTT_REBUY_ORADDON_SUCC_INFO, "updateChip",         false};
	{g_ModelCmd.NEW_MTT_TABLE_ID,                "updateTid",          false};
	{g_ModelCmd.NEW_MTT_MID,                     "updateMid",          false};
	{g_ModelCmd.NEW_MTT_RAISE_BLIND_CD,          "updateRaiseBlindCD", false}; --涨盲定时
	-- {g_ModelCmd.NEW_MTT_MY_SEATCHIPS,            "updateMySeatChip",   false};
	{g_ModelCmd.NEW_MTT_ROOM_MATCH_INFO,         "setMyInfoRank",      false}; -- 0x7015; --SVR服务端维护奖池排名盲注等信息
	{g_ModelCmd.NEW_MTT_ANT_END,                 "antEnd",             false};

	{g_ModelCmd.NEW_MTT_APPLY_AND_REWAED_INFO,   "updateRewardNum",    false}; -- 更新報名人數和 錢圈人數
	{g_ModelCmd.ROOM_MATCH_RANKING,              "matchRanking",       false};
	{g_ModelCmd.ROOM_BLIND_CHANGE,               "blindChange",        false}; -- 盲註變化
	{g_ModelCmd.ROOM_MATCH_END,                  "matchEnd",           false}; -- 比赛彻底结束了
	{g_ModelCmd.ROOM_MATCH_CLOSE,                "matchClose",         false};
	{g_ModelCmd.ROOM_MATCH_START,                "matchStart",         false};
}
            

function MTTRoomSceneCtr:ctor(view)
	NormalRoomSceneCtr.ctor(self,view)

end

function MTTRoomSceneCtr:onEnter()
    NormalRoomSceneCtr.onEnter(self)
    g_RoomInfo.m_isMttMatchEnd = false
    g_RoomInfo.m_isShowMttMatchResult = false
	self:watchData()
end

function MTTRoomSceneCtr:onCleanup()
	self.m_view = nil
	self:unwatchData()
    NormalRoomSceneCtr.onCleanup(self)
    if self.m_hideTimer1 then
        g_Schedule:cancel(self.m_hideTimer1)
    end
    if self.m_hideTimer2 then
        g_Schedule:cancel(self.m_hideTimer2)
    end
    if self.m_hideTimer3 then
        g_Schedule:cancel(self.m_hideTimer3)
    end
    g_RoomInfo.m_isMttMatchEnd = false
    g_RoomInfo.m_isShowMttMatchResult = false
end

function MTTRoomSceneCtr:watchData(index)
	self.m_watchDataList1 = {}
	---注册监听事件
	if self.s_watchDataList then
		for k,v in pairs(self.s_watchDataList) do
			table.insert(self.m_watchDataList1,{v[1],self,self[v[2]],v[3]})
		end
	end
    g_Model:watchDataList(self.m_watchDataList1);
end
function MTTRoomSceneCtr:unwatchData(index)
    if self.m_watchDataList1 ~= nil then
        g_Model:unwatchDataList(self.m_watchDataList1);
    end
    self.m_watchDataList1 = nil;
end

----------------------------- overwrite start -----

function MTTRoomSceneCtr:onLoginRoomSuccess()
	self.super.onLoginRoomSuccess(self)
	self.m_socketManager:reqApplyAndRewardNum()
end

function MTTRoomSceneCtr:onUserSitDown(user)
	self.super.onUserSitDown(self,user)
end

function MTTRoomSceneCtr:onGameStart(data)
	self.super.onGameStart(self,data)
    self.m_view:updateBlindInfo()

	if self.m_SeatManager:selfInGame() then
		self.m_view:showStandUpBtn(true)
	else
		self.m_view:showStandUpBtn(false)
	end
end

function MTTRoomSceneCtr:onStandClick()
    self:showLossChipsDialog(self.standUp, self)
end

function MTTRoomSceneCtr:onBack()
    if self.m_SeatManager:selfInSeat() then
        if self.m_isMatchStart then
            self:showLossChipsDialog()
        else
            self:showLossChipsDialog1()
        end
    else
		self:back()
    end
end

function MTTRoomSceneCtr:showLossChipsDialog(func,obj)
	g_AlertDialog.getInstance():setTitle(GameString.get("tips"))
	             :setContent(GameString.get("str_room_leave_match_confirm"))
	             :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
	             :setLeftBtnTx(GameString.get("cancel"))
	             :setRightBtnTx(GameString.get("confirm_btn"))
	             :setRightBtnFunc(func or self.back, obj or self)
	             :show()
end

function MTTRoomSceneCtr:showLossChipsDialog1(func,obj)
	g_AlertDialog.getInstance():setTitle(GameString.get("tips"))
	             :setContent(GameString.get("str_room_leave_match_confirm3"))
	             :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
	             :setLeftBtnTx(GameString.get("str_room_leave_match_str1"))
	             :setRightBtnTx(GameString.get("str_new_mtt_result_back"))
	             :setRightBtnFunc(func or self.back, obj or self)
	             :show()
end

--在游戏中接受好友邀请
function MTTRoomSceneCtr:nextStandUp(data)
    g_RoomInfo.m_isMttSwitchRoom = true
    self.super.nextStandUp(self,data)
end


function MTTRoomSceneCtr:selfSeatChange(data)
	if self.m_SeatManager:selfInGame() then
		self.m_view:showStandUpBtn(true)
	else
		self.m_view:showStandUpBtn(false)
	end
end
----------------------------- overwrite end -----

function MTTRoomSceneCtr:reqAddon(data)
	self.m_socketManager:reqAddon(data)
end

function MTTRoomSceneCtr:reqRebuy(data)
	self.m_socketManager:reqRebuy(data)
end

-- 展示rebuy 弹窗
function MTTRoomSceneCtr:showRebbyPop(data)

	if not g_TableLib.isTable(data) or not self.m_SeatManager:selfInSeat() then return end
    --坑
    data.type = 2
	local popIndex =  g_PopupConfig.S_POPID.MTT_REBUY_POP
    local isAllAllIn = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
	if isAllAllIn then
		self.m_hideTimer3 = g_Schedule:schedulerOnce(function()
			g_PopupManager:show(popIndex,data)-- rebbuy addon
		end,10)
	else
		g_PopupManager:show(popIndex,data)-- rebbuy addon
	end
end

-- addon
function MTTRoomSceneCtr:showAddonPop(data)
	if not g_TableLib.isTable(data) or not self.m_SeatManager:selfInSeat() then return end
	--坑
    data.type = 1
	local popIndex = g_PopupConfig.S_POPID.MTT_ADDON_POP 
    local isAllAllIn = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
	if isAllAllIn then
		self.m_hideTimer2 = g_Schedule:schedulerOnce(function()
			g_PopupManager:show(popIndex,data)-- rebbuy addon
		end,10)
	else
		g_PopupManager:show(popIndex,data)-- rebbuy addon
	end
end

--弹等待其他人rebuy提示
function MTTRoomSceneCtr:showSomeBodyRebuyingTip(data)
    local isAllAllIn = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
    if isAllAllIn then 
	    self.m_hideTimer1 = g_Schedule:schedulerOnce(function()
        	self.m_view:showRebuyingTip(data);
	    end,10)
   else
        self.m_view:showRebuyingTip(data);
   end
end
--弹等待其他人rebuy提示
function MTTRoomSceneCtr:hiddenSomeBodyRebuyingTip()
   self.m_view:hideRebuyingTip();
end

--锦标赛开赛前提示
function MTTRoomSceneCtr:showCountDownT(value)
	if (value > 0) then
		self.m_view:updateCountDownTime(value)
    else
        self.m_isMatchStart = true;
    end
end

-- 比赛场-多桌锦标赛  通知比赛开始时间
-- @param value
function MTTRoomSceneCtr:tournamentStartTime(value)
    local tournament = g_Model:getData(g_ModelCmd.ROOM_TOURNAMENT_DATA) or {};
	tournament.mid = g_RoomInfo:getTableLevel()
    tournament.time = value;
	self.m_socketManager:reqApplyAndRewardNum()
end

--更新进入钱圈人数 
function MTTRoomSceneCtr:updateRewardNum(obj)
	self.m_view:updateRewardNum(obj)
end

-- 比赛场 通知比赛开始
-- @param value
function MTTRoomSceneCtr:matchStart(value)
    if(not value) then return end
      
    self.m_isMatchStart = true;
	self.m_socketManager:reqApplyAndRewardNum()
    self.m_view:onMatchStart();
    self.m_view:showStandUpBtn(true);
	g_AlarmTips.getInstance():setText(GameString.get("str_room_match_start")):show()
	
    if self.m_SeatManager:getInstance():getSelfSeatId() then
        -- DailyTaskManager.getInstance():reportEnterIntoMatch(g_RoomInfo.ROOM_TYPE_PROMOTION); -- 上報
    end
end
   
-- 前注 結束
function MTTRoomSceneCtr:antEnd(obj)
    if obj ~= false then
		-- g_AlarmTips.getInstance():setText("MTTRoomSceneCtr:antEnd 前註結束 清除狀態,未實現"):show()
        -- OperationManager:refresh();
        self.m_SeatManager:antEnd();  --前注当做是单独的一轮，结束的时候清掉状态
    end			
end

-- 比赛场 通知用户排名 
-- @param value	
function MTTRoomSceneCtr:matchRanking(value)
    self.m_view:resetRoomRankInfo(value)
end

-- 0x7015; --SVR服务端维护奖池排名盲注等信息
function MTTRoomSceneCtr:setMyInfoRank(obj)
	--同時更新rank 裡面我的排名
	self.m_view:resetRoomInfo(obj)
end

--SVR服务端维 盲注/涨盲时间 
function MTTRoomSceneCtr:updateRaiseBlindCD(obj)
	self.m_view:resetRoomBlindInfo(obj)
end

-- 比赛场 广播盲注变化 
-- @param value	
function MTTRoomSceneCtr:blindChange(value)
    value = value or 0;
    g_RoomInfo:setSmallBlind(value)
	-- self.m_view:setInfo()
	local tipText = g_StringLib.substitute(GameString.get("str_room_blind_chang"),
											g_MoneyUtil.formatMoney(value),
											g_MoneyUtil.formatMoney(value*2));
	g_AlarmTips.getInstance():setText(tipText):show()
    --下一次定时涨盲的时候关闭addon弹窗,addon只在当面盲注有效      
	g_EventDispatcher:dispatch(g_SceneEvent.CLOSE_ADDON);
end

--rebuy或者addon成功后更新数据 
function MTTRoomSceneCtr:updateChip(data)
    local userSeat = self.m_SeatManager:getSeat(data.seatId);  
    if (userSeat ~= nil) then
        if userSeat:isSelf() then
            g_EventDispatcher:dispatch(g_SceneEvent.CLOSE_REBUY);
			local tipText = g_StringLib.substitute(GameString.get("str_new_mtt_add_chips_succ"),data.addChips)
            g_AlarmTips.getInstance():setText(tipText):show()
            
	        g_RoomInfo:setUserChips(data.chips)
	        self.m_view:playAddChipsAnim(data.chips,function()
                userSeat:setSeatChips(data.chips)
            end)
        else
            userSeat:setSeatChips(data.chips)
        end
        userSeat:getSeatData().totalChips = data.userMoney; --维护玩家身上的钱
    end
end
        
-- 用户出局 请求比赛结果
function MTTRoomSceneCtr:userOutT(data)
	g_EventDispatcher:dispatch(g_SceneEvent.CLOSE_ADDON);
	g_EventDispatcher:dispatch(g_SceneEvent.CLOSE_REBUY);
	g_EventDispatcher:dispatch(g_SceneEvent.HIDDEN_REBUYING_TIPS)
    self.m_view:clearRoomRankInfo()
	self.m_view:stopAfkInterval()
    self._matchUserOutData = data;
    local tournament = g_Model:getData(g_ModelCmd.ROOM_TOURNAMENT_DATA) or {};
    Log.d('ROOM_TOURNAMENT_DATA--------',tournament)

    self._matchUserOutData.name = tournament.name
    if (tournament)then
        self._tournamentRewardRetryTimes = 3;
    	local params = HttpCmd:getMethod(HttpCmd.s_cmds.MTT_GET_REWARD)
        params.mid = tournament.mid
        params.time = tournament.time
        params.rank = self._matchUserOutData.ranking
        -- Log.d('MTT_GET_REWARD--------',params)
        g_HttpManager:doPost(params, self, self.getTournamentRewardCallBack,self.getTournamentRewardCallBack);
        g_RoomInfo.m_isShowMttMatchResult = true
    end
end

function MTTRoomSceneCtr:getTournamentRewardCallBack(isSuccess, data)
    Log.d('getTournamentRewardCallBack--------',data)
    if isSuccess == true then
        if g_TableLib.isTable(data) then
            if(data.ret ~= nil and data.ret == 1) then
                if (data.desc ~= nil) then
                    self._matchUserOutData.reward = data.desc;
                end
                if(tostring(data.goods_reward) == "1") then
                    self._matchUserOutData.hasGoods = true;
                else
                    self._matchUserOutData.hasGoods = false;
                end
                if(self._matchUserOutData.hasGoods) then
                    self._matchUserOutData.email = data.email;
                end
                if(data.props ~= nil and data.props) then
                    self._matchUserOutData.propsId = data.props;
                end
                if(data.money ~= nil and tonumber(data.money) > 0) then
                    self._matchUserOutData.chip = tonumber(data.money);
                end

                if(data.coalaa ~= nil and tonumber(data.coalaa) > 0) then
                    self._matchUserOutData.coalaa = tonumber(data.coalaa);
                end

                if(data.point ~= nil and tonumber(data.point) > 0) then
                    self._matchUserOutData.score = tonumber(data.point);
                end
--                    self._matchUserOutData.isReward = true;
            else
--                    self._matchUserOutData.isReward = false;
            end
        end
        g_Model:setData(g_ModelCmd.ROOM_TOURNAMENT_OUT_RESULT, self._matchUserOutData);
    elseif (self._tournamentRewardRetryTimes >= 0) then
        local tournament = g_Model:getData(g_ModelCmd.ROOM_TOURNAMENT_DATA);
        if tournament ~= nil then  
            self._tournamentRewardRetryTimes = self._tournamentRewardRetryTimes - 1;
        	local params = HttpCmd:getMethod(HttpCmd.s_cmds.MTT_GET_REWARD)
	        params.mid = tournament.mid
	        params.time = tournament.time
	        params.rank = self._matchUserOutData.ranking
	        g_HttpManager:doPost(params, self, self.getTournamentRewardCallBack,self.getTournamentRewardCallBack);
        end
    else
        g_AlarmTips.getInstance():setText(GameString.get("str_login_bad_network")):show()
        g_RoomInfo.m_isShowMttMatchResult = false
    end
end

-- 比赛场 通知比赛已结束
-- @param value
function MTTRoomSceneCtr:matchEnd(value)

    self.m_isMatchStart = false;
    self.m_view:onMatchEnd();
    
    self.m_view:stopAfkInterval()
    self.m_view:showStandUpBtn(false)
    g_RoomInfo.m_isMttMatchEnd = true

    if(value and not g_RoomInfo.m_isShowMttMatchResult and not self.m_isMttMatchClose  ) then
        g_AlertDialog.getInstance():setTitle(GameString.get("tips"))
                     :setContent(GameString.get("str_room_match_end_notice"))
                     :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.ONE_BUTTON)
                     :setCenterBtnTx(GameString.get("str_room_confirm"))
                     :setCenterBtnFunc(function()
                        if cc.Director:getInstance():getRunningScene():getName() == "RoomScene" then
                            self:matchClose(true);
                        end
                     end)
                     :show()
        return
    end
end

-- mtt 结算弹框关闭
function MTTRoomSceneCtr:onMttResultPopClose()
    
    if(g_RoomInfo.m_isMttMatchEnd and not g_RoomInfo.m_isMttSwitchRoom ) then
        g_AlertDialog.getInstance():setTitle(GameString.get("tips"))
                     :setContent(GameString.get("str_room_match_end_notice"))
                     :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.ONE_BUTTON)
                     :setCenterBtnTx(GameString.get("str_room_confirm"))
                     :setCenterBtnFunc(function()
                        if cc.Director:getInstance():getRunningScene():getName() == "RoomScene" then
                            self:matchClose(true);
                        end
                     end)
                     :show()
        return
    end
end

-- mtt 未開賽
function MTTRoomSceneCtr:showMatchNotOpenPanel(data)
    --1：未达到报名人数，2：坐下的人数小于2
    local str = GameString.get("str_new_mtt_enter_fail_reson_2");
    if(tonumber(data) == 1) then
        str = GameString.get("str_new_mtt_enter_fail_reson_1");
	end
	g_AlarmTips.getInstance():setText(str):show()
    self:matchClose(true)
end

-- 比赛场 通知比赛已结束
-- @param value	
function MTTRoomSceneCtr:matchClose(value)
    if value and self and self.m_view then
        self.m_isMttMatchClose = true
        self.m_view:showStandUpBtn(false);
        self:back()
    end
end

--更新tid 
function MTTRoomSceneCtr:updateTid(value)
end

--更新mid 
function MTTRoomSceneCtr:updateMid(value)	
    self.m_mid = tonumber(value);
	g_EventDispatcher:dispatch(g_SceneEvent.MTT_GET_LIST_REQUEST1,self.m_mid)-- 重连 数据丢失
end

function MTTRoomSceneCtr:clearOldScene(value)	
    self.super.clearOldScene(self)
    self.m_view:clearOldScene();
    if self.m_hideTimer1 then
        g_Schedule:cancel(self.m_hideTimer1)
    end
    self.m_view:hideRebuyingTip();
end

function MTTRoomSceneCtr:canSwitchImmediately()
	return not self.m_SeatManager:selfInSeat()
end


return MTTRoomSceneCtr