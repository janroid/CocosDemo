---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by CavanZhou.
--- DateTime: 2018/12/12 16:09
---
local NormalRoomScene = import("app.scenes.normalRoom").scene
-- local MTTUtil = require("app.scenes.mttLobbyScene.MTTUtil")
local MTTRoomScene = class("MTTRoomScene",NormalRoomScene)
local DailyTaskManager = import("app.scenes.dailyTask").DailyTaskManager;

local MTTRankView = require('.views.MttRankView')

function MTTRoomScene:ctor()
	self:bindCtr(require("MTTRoomSceneCtr")) -- 
	NormalRoomScene.ctor(self)
	self.m_ante = "0";
	self.m_curBlind = 0
    self.m_userRanking = "0";
end

function MTTRoomScene:onEnter()
	NormalRoomScene.onEnter(self)
	self:addMttView()
	self:initMttView()
	self:initMTTRankView()
end

function MTTRoomScene:addMttView()
	self.m_mttView = g_NodeUtils:getRootNodeInCreator('creator/mttRoom/layout/mttRoomNoticeView.ccreator')
	self.m_backGround:addChild(self.m_mttView)
	
    self.m_txLeaveTip        = g_NodeUtils:seekNodeByName(self.m_mttView,"txLeaveTip")
    self.m_btnPrizePool      = g_NodeUtils:seekNodeByName(self.m_mttView,"btnPrizePool")
    self.m_txTotalPrizePool  = g_NodeUtils:seekNodeByName(self.m_mttView,"txTotalPrizePool")
    self.m_txPrizeNum	     = g_NodeUtils:seekNodeByName(self.m_mttView,"txPrizeNum")
    self.m_txUpBlinds	     = g_NodeUtils:seekNodeByName(self.m_mttView,"txUpBlinds")
    self.m_txUpBlindsTime	 = g_NodeUtils:seekNodeByName(self.m_mttView,"txUpBlindsTime")
    self.m_viewCountDown	 = g_NodeUtils:seekNodeByName(self.m_mttView,"viewCountDown")
    self.m_txCountDown	     = g_NodeUtils:seekNodeByName(self.m_mttView,"txCountDown")
    self.m_viewWaitingRebuy	 = g_NodeUtils:seekNodeByName(self.m_mttView,"viewWaitingRebuy")
    self.m_txWaitingRebuy    = g_NodeUtils:seekNodeByName(self.m_mttView,"txWaitingRebuy")
	self.m_btnRank	         = g_NodeUtils:seekNodeByName(self.m_mttView,"btnRank")

	self.m_txTotalPrizePool:setString("")
	self.m_viewCountDown:setVisible(false)
	self.m_viewWaitingRebuy:setVisible(false)
	self.m_txPrizeNum:setVisible(false)
	self.m_txUpBlinds:setVisible(false)
	self.m_btnRank:addClickEventListener(function(sender) self:onbtnRankClick(sender) end)
	self.m_btnPrizePool:addClickEventListener(function(sender) self:onbtnPrizePoolClick(sender) end)


	g_Model:watchData(g_ModelCmd.ROOM_TOURNAMENT_OUT_RESULT,self,self.userOutT,false)
end

function MTTRoomScene:initMTTRankView()
	self.m_rankView = MTTRankView:create()
	self.m_backGround:addChild(self.m_rankView)
	
	self.m_rankView :setZOrder(KZOrder.Scene + 11)
end


function MTTRoomScene:initMttView()
	--荷官 夺金岛 邀请好友 换桌 老虎机
	self.m_dealerView:setTouchEnabled(false)
	self.m_enableSuperLotto = false
	g_NodeUtils:seekNodeByName(self.m_root, 'btn_superLotto'):setVisible(false)
	self.m_dealerView:setTouchEnabled(false)
    self:showStandUpBtn(false)
end

function MTTRoomScene:onCleanup()
	self.m_ante = "0";
	self.m_curBlind = 0
    self.m_userRanking = "0";
	self.m_txTotalPrizePool:setString("")
	self:stopCountDownInterval()
	self:stopRaisBlindInterval()
	self:stopRebuyingInterval()

	NormalRoomScene.onCleanup(self)
	self.m_rankView:onCleanup()

	g_Model:unwatchData(g_ModelCmd.ROOM_TOURNAMENT_OUT_RESULT,self,self.userOutT)
end

function MTTRoomScene:clearOldScene()
    self.m_ante = "0";
	self.m_curBlind = 0
    self.m_userRanking = "0";
	self:stopCountDownInterval()
	self:stopRaisBlindInterval()
	self:stopRebuyingInterval()
	self.m_rebuyingCDT = 0
	self.m_txUpBlinds:setVisible(false)
    self:showStandUpBtn(false)
	self:setBlindInfo()
	if self.m_rankView then
		self.m_rankView:clearAndHidden()
	end
	g_EventDispatcher:dispatch(g_SceneEvent.MTT_DETAIL_CLOSE_POP)
	
	self.m_txTotalPrizePool:setString("")
	g_RoomInfo.m_isMttSwitchRoom = false
	g_RoomInfo.m_isShowMttMatchResult = false
	g_RoomInfo.m_isMttMatchEnd = false
end

-- -- -- - ----- overwrite -----------------------------------------------

--[[
    @desc: 初始化老虎机, 老虎机只出现在sng，普通场，私人房中
    author:{author}
    time:2019-01-15 16:13:04
    @return:
]]

function MTTRoomScene:setBankerPos()
	NormalRoomScene.setBankerPos(self)
	if not self.mCtr.m_isMatchStart then
		self.m_banker:setVisible(false)
	end
end

function MTTRoomScene:initSlotMachine( )
	local roomType = g_RoomInfo:getRoomType()
	
	local SlotMachine = import("app/scenes/slot").SlotMachine
	if not self.m_slotMachine then
		self.m_slotMachine = SlotMachine:create()
		local slotNode = g_NodeUtils:seekNodeByName(self.m_root, 'slotNode')
		slotNode:addChild(self.m_slotMachine)
		slotNode:setVisible(false)
	end
end

function MTTRoomScene:showStandUpBtn(isStandUp)
	self.m_btnStand:setVisible(isStandUp)
	if not isStandUp then
		return
	end
	self.super.showStandUpBtn(self,isStandUp)
end

function MTTRoomScene:setInfo()
	self:updateBlindInfo()
	self:setBankerPos()
end

function MTTRoomScene:updateBlindInfo()
	self.m_curBlind = g_RoomInfo:getSmallBlind() or 0
	self:setBlindInfo(self.m_curBlind)
end

function MTTRoomScene:updateMttTableInfo()
	self.m_curBlind = self.m_curBlind==0 and g_RoomInfo:getSmallBlind() or self.m_curBlind
	self:setBlindInfo(self.m_curBlind)
end

function MTTRoomScene:setBlindInfo(blind)
	blind = blind and blind>0 and blind or g_RoomInfo:getSmallBlind() or 0
	local roomInfoText = g_StringLib.substitute(GameString.get("str_room_info_match"),
												self.m_ante or "0",
												g_MoneyUtil.formatMoney(blind),
												g_MoneyUtil.formatMoney(blind*2),
												self.m_userRanking);
	self.m_infoTx:setString(roomInfoText)
end

-- -- -- - ----- click event -----------------------------------------------

function MTTRoomScene:onbtnRankClick(sender)
end

function MTTRoomScene:onbtnPrizePoolClick(sender)
	-- local data = g_Model:getData(g_ModelCmd.ROOM_TOURNAMENT_DATA)
	-- g_EventDispatcher:dispatch(g_SceneEvent.MATCH_HALL_WATCH_TOURNAMENT,{mid = data.mid,time = data.time})
	-- g_PopupManager:show(g_PopupConfig.S_POPID.MTT_DETAIL_POP)
	g_EventDispatcher:dispatch(g_SceneEvent.MTT_GET_LIST_REQUEST,{mid = self.mCtr.m_mid, tabIndex = 3, curBlind =self.m_curBlind})
end


-- -- -- - ----- event -----------------------------------------------
--开赛倒计时!
function MTTRoomScene:updateCountDownTime(value)
	self.m_countDownT = value
    self.m_startCountT = os.time()
	self:countDownIntervalHandler()
	self:startCountDownInterval()
end

--更新进入钱圈人数 
function MTTRoomScene:updateRewardNum(data)
	self.m_txPrizeNum:setVisible(true)
	self.m_txPrizeNum:setString(GameString.get("str_new_mtt_get_reward_palyer_num") .. tostring(data.rewardNum));
end

--比賽開始
function MTTRoomScene:onMatchStart(data)
	self.m_viewCountDown:setVisible(false)
	self:stopCountDownInterval()
end

-- 比赛场 通知用户排名 
-- @param value	
function MTTRoomScene:resetRoomRankInfo(value)
    self.m_userRanking = value.ranking .. "/" .. value.count;
    self:updateMttTableInfo()
end

-- 比赛场 通知用户排名 
-- @param value	
function MTTRoomScene:clearRoomRankInfo()
    self.m_userRanking = "0"
end

-- 比赛场 SVR服务端维护奖池排名盲注等信息
-- @param value	
function MTTRoomScene:resetRoomInfo(obj)
    self.m_ante =  g_MoneyUtil.formatMoney(obj.ante);
	self.m_raiseCD = obj.leftTime + 1;
	self.m_txUpBlinds:setVisible(true)
    self.m_txUpBlinds:setString(g_StringLib.substitute(GameString.get("str_new_mtt_game_state_raise"), obj.uptime));--"涨盲:" "漲盲時間:{0}秒"
	self.m_txUpBlindsTime:setAnchorPoint(cc.p(0,0))
	self.m_txUpBlindsTime:setPosition(self.m_txUpBlinds:getContentSize().width + 5,0)
	if obj and obj.prize and tonumber(obj.prize)==0 then
		self.m_txTotalPrizePool:setString("")
	else
		self.m_txTotalPrizePool:setString(GameString.get("str_new_mtt_total_pool") .. g_MoneyUtil.formatMoney(tonumber(obj.prize) or 0))
	end
	
    self:updateMttTableInfo()
	self:raisBlindIntervalHandler();
	self:startRaisBlindInterval();
end

-- 比赛场 SVR服务端维盲注涨盲信息
-- @param value	
function MTTRoomScene:resetRoomBlindInfo(uptime)
	self.m_raiseCD = uptime + 1;
    self.m_txUpBlinds:setString(g_StringLib.substitute(GameString.get("str_new_mtt_game_state_raise"), uptime));--"涨盲:" "漲盲時間:{0}秒"
	self.m_txUpBlindsTime:setAnchorPoint(cc.p(0,0))
	self.m_txUpBlindsTime:setPosition(self.m_txUpBlinds:getContentSize().width + 5,0)
	
    -- self:setInfo()
	self:raisBlindIntervalHandler();
	self:startRaisBlindInterval();
end

-- 比赛场 通知用户比赛结束 
function MTTRoomScene:onMatchEnd()
	self.m_viewCountDown:setVisible(false)
	self.m_txUpBlinds:setVisible(false)
	self:stopCountDownInterval()
	self:stopRaisBlindInterval()
	self:stopRebuyingInterval()
end

-- 比赛场 rebuying tip
function MTTRoomScene:showRebuyingTip(value)
	self.m_rebuyingCDT = value
    self.m_startRBCDT = os.time()
	self:RebuyingIntervalHandler()
	self:startRebuyingInterval()
end

-- 比赛场 rebuying tip
function MTTRoomScene:hideRebuyingTip(value)
	self:stopRebuyingInterval()
	self.m_rebuyingCDT = 0
end
 
-- -- -- - ----- fun--------------------------------------------------

--有人rebuying 倒計時
function MTTRoomScene:stopRebuyingInterval()
	self.m_viewWaitingRebuy:setVisible(false)
    if self.m_scheduleRebuyingTask then
        g_Schedule:cancel(self.m_scheduleRebuyingTask.eventObj)
    end
end     
function MTTRoomScene:startRebuyingInterval()
    self:stopRebuyingInterval()
	self.m_viewWaitingRebuy:setVisible(true)
	self.m_scheduleRebuyingTask = g_Schedule:schedule(function()
		self:RebuyingIntervalHandler()
	end,1,1,self.m_rebuyingCDT-self.m_startRBCDT+1) 
end
function MTTRoomScene:RebuyingIntervalHandler()
	local time = self.m_rebuyingCDT - (os.time() - self.m_startRBCDT)
	if time<0 then
		self:stopRebuyingInterval()
		self.m_rebuyingCDT = 0
		return
	end
	self.m_txWaitingRebuy:setString(g_StringLib.substitute(GameString.get("str_new_mtt_waiting_for_other"), time));
end

--漲盲註 倒計時
function MTTRoomScene:stopRaisBlindInterval()
    if self.m_scheduleRaisBlindTask then
		g_Schedule:cancel(self.m_scheduleRaisBlindTask.eventObj)
    end
end
function MTTRoomScene:startRaisBlindInterval()
    self:stopRaisBlindInterval();
	self.m_scheduleRaisBlindTask = g_Schedule:schedule(function()
		self:raisBlindIntervalHandler()
	end,1,1,1000) 
end
function MTTRoomScene:raisBlindIntervalHandler()
    self.m_raiseCD = self.m_raiseCD - 1;
    if(self.m_raiseCD < 0) then
        self:stopRaisBlindInterval()
		self.m_raiseCD = 0
    end
    self.m_txUpBlindsTime:setString("(" .. self.m_raiseCD .. ")");
end


--開賽 倒計時
function MTTRoomScene:stopCountDownInterval()
	self.m_viewCountDown:setVisible(false)
    if self.m_scheduleCountDownTask then
        g_Schedule:cancel(self.m_scheduleCountDownTask.eventObj)
    end
end     
function MTTRoomScene:startCountDownInterval()
    self:stopCountDownInterval()
	self.m_viewCountDown:setVisible(true)
    self:showStandUpBtn(false)
	self.m_scheduleCountDownTask = g_Schedule:schedule(function()
		self:countDownIntervalHandler()
	end,1,1,self.m_countDownT-self.m_startCountT+1) 
end
function MTTRoomScene:countDownIntervalHandler()
	local time = self.m_countDownT - (os.time() - self.m_startCountT)
	if time<0 then
		self:stopCountDownInterval()
		self.m_countDownT = 0
		self:showStandUpBtn(true)
		return
	end
	self.m_banker:setVisible(false)
	self:showStandUpBtn(false)
	self.m_txCountDown:setString(g_StringLib.substitute(GameString.get("str_room_tournament_start_time_tip"), g_TimeLib.secondTo0M0S(time)))
end

function MTTRoomScene:userOutT(value)
	-- Log.d('userOutT------------------',value)
    if(value.ranking > 3) then
    	g_PopupManager:show(g_PopupConfig.S_POPID.MTT_OTHER_RESULT_POP,value)
   	else
   		g_PopupManager:show(g_PopupConfig.S_POPID.MTT_RESULT_POP,value)
   		-- g_PopupManager:show(g_PopupConfig.S_POPID.MTT_OTHER_RESULT_POP,value)
   	end
end

function MTTRoomScene:overrideForbidWebEntrance()
    return true
end

return MTTRoomScene