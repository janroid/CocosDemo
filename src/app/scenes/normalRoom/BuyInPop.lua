---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MartinLai.
--- DateTime: 2019/1/22 11:22
---
local PopupBase = import("app.common.popup").PopupBase

local BuyInPop = class("BuyInPop",PopupBase)

function BuyInPop:ctor()
	PopupBase.ctor(self)
	self:loadLayout('creator/normalRoom/BuyInPop.ccreator')
	self:init()
end

function BuyInPop:init()
	self.m_bg = g_NodeUtils:seekNodeByName(self,'bg')
	self.m_btnClose = g_NodeUtils:seekNodeByName(self,'btnClose')
	self.m_txTitle = g_NodeUtils:seekNodeByName(self,'txTitle')
	self.m_btnBuyIn = g_NodeUtils:seekNodeByName(self,'btnBuyIn')
	self.m_txBuyIn = g_NodeUtils:seekNodeByName(self,'txBuyIn')
	self.m_btnMin = g_NodeUtils:seekNodeByName(self,'btnMin')
	self.m_txMin = g_NodeUtils:seekNodeByName(self,'txMin')
	self.m_btnMax = g_NodeUtils:seekNodeByName(self,'btnMax')
	self.m_txMax = g_NodeUtils:seekNodeByName(self,'txMax')
	self.m_txMinBuy = g_NodeUtils:seekNodeByName(self,'txMinBuy')
	self.m_txMinBuyNum = g_NodeUtils:seekNodeByName(self,'txMinBuyNum')
	self.m_txMaxBuy = g_NodeUtils:seekNodeByName(self,'txMaxBuy')
	self.m_txMaxBuyNum = g_NodeUtils:seekNodeByName(self,'txMaxBuyNum')
	self.m_toggleAutoBuy = g_NodeUtils:seekNodeByName(self,'toggleAutoBuy')
	self.m_txAutoBuyIn = g_NodeUtils:seekNodeByName(self,'txAutoBuyIn')
	self.m_txTips = g_NodeUtils:seekNodeByName(self,'txTips')
	self.m_tipsBg = g_NodeUtils:seekNodeByName(self,'tipsBg')
	
	self.m_txBuyIn:setString(GameString.get("str_buyIn"))
	self.m_txMin:setString(GameString.get("str_min"))
	self.m_txMax:setString(GameString.get("str_max"))
	self.m_txMinBuy:setString(GameString.get("str_min_buy"))
	self.m_txMaxBuy:setString(GameString.get("str_max_buy"))
	self.m_txAutoBuyIn:setString(GameString.get("str_auto_buyIn"))
	
	self:initSlider()
	self:initListener()
end

function BuyInPop:initListener()
	self.m_slider:addEventListener(function (sender, eventType)
		if sender:getPercent() > self.m_maxPercent then
			sender:setPercent(self.m_maxPercent)
		elseif sender:getPercent() < 12 then
			sender:setPercent(12)
		end
		self:updateTips(sender:getPercent())
	end)
	
	self.m_btnClose:addClickEventListener(handler(self,self.hidden))
	
	self.m_btnBuyIn:addClickEventListener(function ()
		self:hidden()
		self.m_data.buyinChips = self.m_money
		g_EventDispatcher:dispatch(g_SceneEvent.ROOM_USER_BUY_IN, self.m_data)
		if self.m_toggleAutoBuy:isSelected() then
			g_EventDispatcher:dispatch(g_SceneEvent.ROOM_AUTO_BUY_IN)
		end
	end)
	
	self.m_btnMax:addClickEventListener(function ()
		self:setPercent(self.m_maxPercent)
	end)
	
	self.m_btnMin:addClickEventListener(function ()
		self:setPercent(12)
	end)
end

function BuyInPop:updateTips(percent)
	local x = (percent) * 354 / 100
	self.m_tipsBg:setPositionX(x)
	self.m_money = math.abs(g_RoomInfo:getMinBuyIn() + ((percent - 12) / 76) * (g_RoomInfo:getMaxBuyIn() - g_RoomInfo:getMinBuyIn()))
	self.m_txTips:setString(g_MoneyUtil.formatMoney(self.m_money))
end

function BuyInPop:initSlider()
	self.m_slider       = ccui.Slider:create()
	self.m_bg:addChild(self.m_slider)
	g_NodeUtils:arrangeToCenter(self.m_slider)
	self.m_slider:loadBarTexture("creator/normalRoom/img/allIn/progressBg.png")
	self.m_slider:loadSlidBallTextures("creator/normalRoom/img/allIn/progressBar.png")
	self.m_slider:loadProgressBarTexture("creator/normalRoom/img/allIn/progress.png")
	self.m_slider:setScale(0.9)
end

function BuyInPop:show(data)
	self.m_data = data
	PopupBase.show(self)
	self.m_txTitle:setString(string.format(GameString.get("str_current_money"), g_MoneyUtil.formatMoney(g_AccountInfo:getMoney())))
	self.m_txMinBuyNum:setString(g_MoneyUtil.formatMoney(g_RoomInfo:getMinBuyIn()))
	self.m_txMaxBuyNum:setString(g_MoneyUtil.formatMoney(g_RoomInfo:getMaxBuyIn()))
	
	self:updateSlider()
end

function BuyInPop:setPercent(percent)
	self.m_slider:setPercent(percent)
	self:updateTips(percent)
end

function BuyInPop:updateSlider()
	local userMoney = g_AccountInfo:getMoney()
	local maxBuyIn = g_RoomInfo:getMaxBuyIn()
	local minBuyIn = g_RoomInfo:getMinBuyIn()
	self.m_maxPercent = 88
	self.m_btnBuyIn:setEnabled(true)
	
	if userMoney < minBuyIn then
		self:setPercent(12)
		self.m_maxPercent = 12
		return
	elseif userMoney < maxBuyIn then
		self.m_maxPercent = (userMoney - minBuyIn) / (maxBuyIn - minBuyIn) * 76 + 12
	end
	
	local defaultPercent = (0.5 * maxBuyIn - minBuyIn) / (maxBuyIn - minBuyIn) * 76 + 12
	self:setPercent(math.min(self.m_maxPercent, defaultPercent))
end

return BuyInPop