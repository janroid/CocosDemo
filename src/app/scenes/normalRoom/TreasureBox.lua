---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by CavanZhou.
--- DateTime: 2019/03/05 16:50
---

local TreasureBox = class("TreasureBox")

TreasureBox.s_isSitDown = false

TreasureBox.s_icon = {
	NORMAL = "creator/normalRoom/img/treasureBox/treasureBoxNormal.png";
	OPEN   = "creator/normalRoom/img/treasureBox/treasureBoxOpen.png";
};


function TreasureBox:ctor(view)
	self.m_root = view
	self:initTreasureBox()
	g_Model:watchData(g_ModelCmd.USER_SELF_SEAT_ID, self, self.selfSeatChange, false) -- 更新宝箱状态
end

function TreasureBox:dtor()
	g_Model:unwatchData(g_ModelCmd.USER_SELF_SEAT_ID,   self, self.selfSeatChange)
	TreasureBox.s_isSitDown = false
	self:stopCountDownInterval()
	self.m_time = nil
	self.m_root = nil
	g_HttpManager:cancelRequestByObj(self)
end

function TreasureBox:initTreasureBox()
	if not self.m_treasureBoxView then
		self.m_treasureBoxView = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxView')
		self.m_btnTreasureBox  = g_NodeUtils:seekNodeByName(self.m_root, 'btnTreasureBox')
		self.m_tbCountDownTx   = g_NodeUtils:seekNodeByName(self.m_root, 'tbCountDownTx')
		self.m_treasureBoxBg   = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxBg')
		self.m_treasureBoxBg1   = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxBg1')
		self.m_iconTreasureBox = g_NodeUtils:seekNodeByName(self.m_root, 'iconTreasureBox')
		self.m_tbCountDownTx1  = g_NodeUtils:seekNodeByName(self.m_root, 'tbCountDownTx1')
		self.m_tbNoticeTx      = g_NodeUtils:seekNodeByName(self.m_root, 'tbNoticeTx')
		self.m_treasureBoxDetailBg     = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxDetailBg')
		self.m_treasureBox = g_NodeUtils:seekNodeByName(self.m_root, 'TreasureBox')

		self.m_btnTreasureBox:addClickEventListener(
			function()
				self.m_treasureBoxDetailBg:setVisible(true)
			end
		)
		-- self.m_treasureBoxBg:addClickEventListener(function() end)
		self.m_treasureBoxDetailBg:addClickEventListener(
			function()
				self.m_treasureBoxDetailBg:setVisible(false)
			end
		)
		self.m_treasureBox:addClickEventListener(
			function()
				self.m_treasureBoxDetailBg:setVisible(false)
				self:onBtnGetRewardClick()
			end
		)
	end

	self.m_tbCountDownTx:setString("")
	self.m_tbCountDownTx1:setString("")
	self.m_tbNoticeTx:setString(GameString.get("str_room_room_activity_treasuer_box_title"))
	self.m_btnTreasureBox:setTouchEnabled(false)
	self.m_treasureBox:setTouchEnabled(false)
	self:updateTreasureBoxState()
	self.m_treasureBoxView:setVisible(false)
	self.m_treasureBoxDetailBg:setVisible(false)
	-- self.m_treasureBoxDetailBg:setLocalZOrder(99)
end

function TreasureBox:updateTreasureBoxView()

	if not self.m_treasureBoxView then
		self:initTreasureBox()
	end
	
	if self:isTreasureBoxOpen() then
		self:getTreasureBoxData()
		self.m_treasureBoxView:setVisible(true)
		return
	end
	self.m_treasureBoxView:setVisible(false)
	self.m_btnTreasureBox:setTouchEnabled(false)
end

--宝箱倒计时!
function TreasureBox:updateTreasureBoxState()

	local filePath = TreasureBox.s_icon.OPEN

	if (self.m_time and self.m_time ~= 0) or not self.m_time then
		if self.isNormal then
			return
		end
		filePath = TreasureBox.s_icon.NORMAL
		self.m_btnTreasureBox:addClickEventListener(
			function()
				self.m_treasureBoxDetailBg:setVisible(true)
			end)
			self.isNormal = true
	else
		self.m_btnTreasureBox:addClickEventListener(
			function()
				self.m_treasureBoxDetailBg:setVisible(false)
				self:onBtnGetRewardClick()
			end)
			self.isNormal = false
	end

	self.m_btnTreasureBox:loadTextureNormal(filePath)
	self.m_btnTreasureBox:loadTexturePressed(filePath)
	self.m_iconTreasureBox:setTexture(filePath)
	-- self.m_iconTreasureBox:loadTexturePressed(filePath)
	
end


-- -- -- - ----- event -----------------------------------------------
-- 领取奖励
function TreasureBox:onBtnGetRewardClick()
	local str = ""
	if self.m_time > 0 then
		str = g_StringLib.substitute(GameString.get("str_room_treasure_box_not_reward"), g_TimeLib.secondTo0M(self.m_time), g_TimeLib.secondTo0S(self.m_time), TreasureBox.s_reward)
	elseif not TreasureBox.s_isSitDown then
		str = GameString.get("str_room_treasure_box_not_sit_down")
	else
		-- 领取奖励
		self:treasureRewardHandler()
		return
	end
	g_AlarmTips.getInstance():setText(str):show()

end    

--宝箱倒计时!
function TreasureBox:updateCountDownTime(value)
	self.m_btnTreasureBox:setTouchEnabled(true)
	self.m_treasureBox:setTouchEnabled(true)
	self.m_cdT = value
    self.m_startCountT = os.time()
	self:countDownIntervalHandler()
	self:startCountDownInterval()
end

--宝箱 倒計時
function TreasureBox:stopCountDownInterval()
    if self.m_scheduleCountDownTask then
        g_Schedule:cancel(self.m_scheduleCountDownTask.eventObj)
    end
end     
function TreasureBox:startCountDownInterval()
	if not self.m_scheduleCountDownTask then
		self.m_scheduleCountDownTask = g_Schedule:schedule(function()
			self:countDownIntervalHandler()
		end,1,1,1000000) 
	end
end
function TreasureBox:countDownIntervalHandler()
	if not TreasureBox.s_isSitDown and self.m_time then
		self.m_startCountT = os.time()
		self.m_cdT = self.m_time or self.m_cdT
		return
	end
	local time = self.m_cdT - (os.time() - self.m_startCountT)
	if time<=0 then
		self.m_cdT = 0
		self.m_time = 0
		self.m_tbCountDownTx:setString("")
		self.m_tbCountDownTx1:setString("")
		self:updateTreasureBoxState()
		return
	end
	self.m_time = time
	self.m_tbCountDownTx:setString(g_TimeLib.secondTo0M0S(time))
	self.m_tbCountDownTx1:setString(g_TimeLib.secondTo0M0S(time))
end

function TreasureBox:getTreasureBoxData()
    local param = HttpCmd:getMethod(HttpCmd.s_cmds.TREASUREBOX_GET_INFO)
	g_HttpManager:doPost(param, self, self.getCallback);
end
function TreasureBox:getCallback(isSuccess, jsn) 
    if not isSuccess then
		return
	end

    --jsn = '{"code": 0,"rewardChip": "100筹码", "remainTime": 9}';
    if not g_TableLib.isTable(jsn) then
        jsn = {};
    end
    jsn = jsn or {};

    if(jsn == nil or tonumber(jsn["code"]) ~= 0) then
        return;
    end

    TreasureBox.s_reward = jsn["rewardChip"];
    self:updateCountDownTime(jsn["remainTime"]); -- 开始计时
	self:updateTreasureBoxState()
end

-- success 小喇叭更新金币
function TreasureBox:treasureRewardHandler()
	self.m_btnTreasureBox:setTouchEnabled(false)
	self.m_treasureBox:setTouchEnabled(false)
    local param = HttpCmd:getMethod(HttpCmd.s_cmds.TREASUREBOX_GET_REWARD)
	g_HttpManager:doPost(param, self, self.rewardCallback);
end
function TreasureBox:rewardCallback(isSuccess, jsn) 

	self.m_btnTreasureBox:setTouchEnabled(true)
	self.m_treasureBox:setTouchEnabled(true)
	
    if not isSuccess then
		return
	end

    if not g_TableLib.isTable(jsn) then
        jsn = {};
    end
    jsn = jsn or {}

    local code = tonumber(jsn["code"]);
    if(code == 2) then
        -- TaskReporter.getInstance():reportOpenBox();

        local str = g_StringLib.substitute(GameString.get("str_room_treasure_box_reward"), TreasureBox.s_reward)
		g_AlarmTips.getInstance():setText(str):show()

        local nextRemainTime = tonumber(jsn["nextRemainTime"]);
        self:updateCountDownTime(nextRemainTime);
		self:updateTreasureBoxState()
        TreasureBox.s_reward = jsn["nextRewardChip"];
    elseif(code == 0 and jsn["remainTime"] > 0) then
        self:updateCountDownTime(jsn["remainTime"]);
		self:updateTreasureBoxState()
    else
        -- TopTipKit.badNetworkHandler(nil,nil," TreasureBox.rewardCallback , 222");
    end
end

function TreasureBox:selfSeatChange(num)
	local value = (num~= -1) and true or false

    if(value == TreasureBox.s_isSitDown) or not self:isTreasureBoxOpen() then
		return;
    end

    TreasureBox.s_isSitDown = value
    local act = TreasureBox.s_isSitDown and HttpCmd.s_cmds.TREASUREBOX_SET_SIT or HttpCmd.s_cmds.TREASUREBOX_SET_STAND
    local param = HttpCmd:getMethod(act)
	g_HttpManager:doPost(param, self, function() end);
end


function TreasureBox:isTreasureBoxOpen() 

	local roomAct = g_AccountInfo:getRoomAct()
	local treasureBoxSb = g_AccountInfo:getTreasureSb()

	if (treasureBoxSb ~= nil) then
		local sbArr = g_StringUtils.split(treasureBoxSb, ",")
		if (g_TableLib.indexof(sbArr, tostring(g_RoomInfo:getSmallBlind())) and g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_NORMAL) then
			return true
		else
			return false
		end

	else
		return roomAct == 1 and  g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_NORMAL
	end
end

return TreasureBox