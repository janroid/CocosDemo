---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MartinLai.
--- DateTime: 2018/12/12 16:09
---
local ViewScene = import("framework.scenes").ViewScene;
local NetImageView =  import("app.common.customUI").NetImageView
local BehaviorExtend = import("framework.behavior").BehaviorExtend;
local BehaviorMap = import("app.common.behavior").BehaviorMap

local NormalRoomScene = class("NormalRoomScene",ViewScene);
BehaviorExtend(NormalRoomScene);

local SeatManager = require("SeatManager").getInstance()
local Seat = require("Seat")
local SeatAnim = require("SeatAnim")
local PropAnim = require("PropAnim"):create()
local TableLight = require("TableLight")
local ChipManager = require("chipManager.ChipManager")
local DealerConfig = import('app.scenes.dealer').DealerConfig
local NormalRoomSceneCtr = require("NormalRoomSceneCtr")
local TreasureBox = require("TreasureBox")
local LoginRoomFailedHandler = require("LoginRoomFailedHandler")

NormalRoomScene.s_afkTotalSecond          = 300 --暂离时间

NormalRoomScene.BankerPos = {
	{x = 325, y = 115};
	{x = 430, y = 15};
	{x = 430, y = -70};
	{x = 195, y = -130};
	{x = -85, y = -130};
	{x = -360, y = -130};
	{x = -430, y = -70};
	{x = -430, y = 15};
	{x = -325, y = 115};
}

function NormalRoomScene:ctor()
	ViewScene.ctor(self,nil,"RoomScene")
	self:init();
	self:bindCtr(self:getCtrClass());
end

--@desc: 返回需要绑定的控制器类型
--@SuperType 子类可以重写该方法，通常Scene被继承了，那么对应的控制器也应该被继承
--@return: class 
function NormalRoomScene:getCtrClass()
	return NormalRoomSceneCtr
end

function NormalRoomScene:getRoot()
	return self.m_root
end

function NormalRoomScene:onEnter()
	self.m_seatManager = SeatManager
	self:refreshGameRoom();
	self:updateTreasureBoxView() -- 方便sng mtt用
	
	SeatManager:init(self.m_seatContainer)
	ChipManager:initialize(self.m_betChipsNode)
	self.m_layoutChat:setVisible(false)

	ViewScene.onEnter(self)
	self.m_layoutChat:setVisible(true)

	self:setCurrentTime()
end

function NormalRoomScene:init()
	self.m_root, self.m_aniManager = self:loadLayout('creator/normalRoom/roomScene.ccreator')
	self:addChild(self.m_root)
	self.m_enableSuperLotto = true
	self:initView()
	self:initListener()
end

function NormalRoomScene:doLogic(funcName, ...)
	if self.mCtr and type(self.mCtr[funcName] == "function") then
		self.mCtr[funcName](self.mCtr,...)
	end
end

function NormalRoomScene:initView()
	self.m_backGround          = g_NodeUtils:seekNodeByName(self.m_root, 'bg')
	self.m_btnStand          = g_NodeUtils:seekNodeByName(self.m_root, 'standBtn')
	self.m_btnStandImg       = g_NodeUtils:seekNodeByName(self.m_root, 'standImg')
	self.m_btnMenu			 = g_NodeUtils:seekNodeByName(self.m_root, 'menuBtn')
	self.m_btnShop			 = g_NodeUtils:seekNodeByName(self.m_root, 'shopBtn')
	self.m_btnTask			 = g_NodeUtils:seekNodeByName(self.m_root, 'taskBtn')
	self.m_table             = g_NodeUtils:seekNodeByName(self.m_root, 'table')
	self.m_seatContainer     = g_NodeUtils:seekNodeByName(self.m_root, 'seatContainer')
	self.m_publicCardNode    = g_NodeUtils:seekNodeByName(self.m_root, 'publicCardNode')
	self.m_bankerNode        = g_NodeUtils:seekNodeByName(self.m_root, 'bankerNode')
	self.m_betChipsNode      = g_NodeUtils:seekNodeByName(self.m_root, 'betChipsNode')
	self.m_infoTx            = g_NodeUtils:seekNodeByName(self.m_root, 'infoTx')
	self.m_banker            = g_NodeUtils:seekNodeByName(self.m_root, 'banker')
	self.m_operation         = g_NodeUtils:seekNodeByName(self.m_root, 'operation')
	self.m_raiseNode         = g_NodeUtils:seekNodeByName(self.m_root, 'raiseNode')
	self.m_btnFold           = g_NodeUtils:seekNodeByName(self.m_root, 'btnFold')
	self.m_btnCheck          = g_NodeUtils:seekNodeByName(self.m_root, 'btnCheck')
	self.m_btnRaise          = g_NodeUtils:seekNodeByName(self.m_root, 'btnRaise')
	self.m_txFold            = g_NodeUtils:seekNodeByName(self.m_root, 'txFold')
	self.m_txCheck           = g_NodeUtils:seekNodeByName(self.m_root, 'txCheck')
	self.m_txRaise           = g_NodeUtils:seekNodeByName(self.m_root, 'txRaise')
	self.m_sliderContainer   = g_NodeUtils:seekNodeByName(self.m_root, 'sliderContainer')
	self.m_dealerView		 = g_NodeUtils:seekNodeByName(self.m_root, 'dealer_view')
	self.m_txRaiseNum   	 = g_NodeUtils:seekNodeByName(self.m_root, 'raiseNum')
	self.m_btnAllIn     	 = g_NodeUtils:seekNodeByName(self.m_root, 'btnAllIn')
	self.m_btnContainer   	 = g_NodeUtils:seekNodeByName(self.m_root, 'btnContainer')
	self.m_btn3X           	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'btn3X')
	self.m_tx3X           	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'tx3X')
	self.m_btnAllIn2       	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'btnAllIn')
	self.m_txAllIn2       	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'txAllIn')
	self.m_btnHalfPool     	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'btnHalfPool')
	self.m_txHalfPool     	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'txHalfPool')
	self.m_btn75Pool     	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'btn0.75Pool')
	self.m_tx75Pool     	 = g_NodeUtils:seekNodeByName(self.m_btnContainer, 'tx0.75Pool')
	self.m_preOperationNode  = g_NodeUtils:seekNodeByName(self.m_root, 'preOperation')
	self.m_rbPreFold         = g_NodeUtils:seekNodeByName(self.m_preOperationNode, 'togglePreFold')
	self.m_txPreFold         = g_NodeUtils:seekNodeByName(self.m_preOperationNode, 'txPreFold')
	self.m_rbPreCheck        = g_NodeUtils:seekNodeByName(self.m_preOperationNode, 'togglePreCheck')
	self.m_txPreCheck        = g_NodeUtils:seekNodeByName(self.m_preOperationNode, 'txPreCheck')
	self.m_rbPreRaise        = g_NodeUtils:seekNodeByName(self.m_preOperationNode, 'togglePreRaise')
	self.m_txPreRaise        = g_NodeUtils:seekNodeByName(self.m_preOperationNode, 'txPreRaise')
	self.m_cardTypeTips      = g_NodeUtils:seekNodeByName(self.m_root, 'cardTypeTipsBg')
	self.m_txCardType        = g_NodeUtils:seekNodeByName(self.m_root, 'txCardType')
	self.m_btnShowHand       = g_NodeUtils:seekNodeByName(self.m_root, 'btnShowHand')
	self.m_txShowHand        = g_NodeUtils:seekNodeByName(self.m_root, 'txShowHand')
	self.m_menuNode          = g_NodeUtils:seekNodeByName(self.m_root, 'backMenuNode')
	self.m_menu              = g_NodeUtils:seekNodeByName(self.m_root, 'backMenu')
	self.m_btnBack           = g_NodeUtils:seekNodeByName(self.m_root, 'btnBack')
	self.m_txBack            = g_NodeUtils:seekNodeByName(self.m_root, 'txBackToHall')
	self.m_btnGameReview     = g_NodeUtils:seekNodeByName(self.m_root, 'btnGameReview')
	self.m_txGameReview      = g_NodeUtils:seekNodeByName(self.m_root, 'txGameReview')
	self.m_soundSliderNode   = g_NodeUtils:seekNodeByName(self.m_root, 'soundSliderNode')
	self.m_rbShake           = g_NodeUtils:seekNodeByName(self.m_root, 'toggleShake')
	self.m_shakeIcon         = g_NodeUtils:seekNodeByName(self.m_root, 'shakeIcon')
	self.m_selfSeatArrow     = g_NodeUtils:seekNodeByName(self.m_root, 'selfSeatArrow')
	self.m_dealerChatBubble  = g_NodeUtils:seekNodeByName(self.m_root, 'dealer_chat_bubble')
	self.m_txDealerChat      = g_NodeUtils:seekNodeByName(self.m_root, 'tx_dealer_bubble')
	self.m_txTime            = g_NodeUtils:seekNodeByName(self.m_root, 'tx_time')
	self.m_imgWifi           = g_NodeUtils:seekNodeByName(self.m_root, 'wifi')
	self.m_detailBox 	     = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxDetailBg')
	self.m_treasureBox   	= g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxView')

	self.m_dealerChatBubble:setVisible(false)
	
	g_NodeUtils:seekNodeByName(self.m_root, 'btn_superLotto'):setVisible(false)


	self.m_btnChat 			 = g_NodeUtils:seekNodeByName(self.m_root,'btnChat')
	self.m_layoutChat		 = g_NodeUtils:seekNodeByName(self.m_btnChat,'layout_chat')
	self.m_txChatHint		 = g_NodeUtils:seekNodeByName(self.m_root,'chatHint')
	-- self.m_txChatHint:ignoreAdaptwithsize(false)
    self.m_txChatHint:removeElement(1)
	self.m_txChatHint:removeElement(0)
    local re1 = ccui.RichElementText:create(1, cc.c3b(104,163,229), 255," ",nil, 20) 
	local re2 = ccui.RichElementText:create(2, cc.c3b(254,254,254), 255, " ", nil, 20)
    self.m_txChatHint:pushBackElement(re1)
	self.m_txChatHint:pushBackElement(re2)
	self.m_typeTipsBg        = g_NodeUtils:seekNodeByName(self.m_root, 'typeTipsBg')
	self.m_typeTips          = g_NodeUtils:seekNodeByName(self.m_root, 'typeTips')

	self.m_layoutChat:setClippingEnabled(true)
	
	self:initRaiseSlider()
	self:initSoundSlider()
	self:initPublicCard()
	self:initDealer()
	self:initCardCalculatorView()
	self:initAFKView()
	self:initWebEntranceView()

	self.m_dealerPhraseList = GameString.get('str_room_dealer_speak_array');
	
	self.m_btnFold:setCascadeColorEnabled(true)
	self.m_btnCheck:setCascadeColorEnabled(true)
	self.m_btnRaise:setCascadeColorEnabled(true)
	self.m_btn3X:setCascadeColorEnabled(true)
	
	self.m_preOperationNode:setAllowedNoSelection(true)
	self.m_cardTypeTips:setZOrder(2)
	self.m_operation :setZOrder(KZOrder.Scene + 12)
	self.m_tableLight = TableLight.new(g_NodeUtils:seekNodeByName(self.m_root, 'light'))
	self.m_menuNode:setZOrder(KZOrder.Scene + 11)

	self.m_raiseNode:setVisible(false)
	self.m_tableLight:setVisible(false)
	self.m_btnShowHand:setVisible(false)
	self.m_banker:setVisible(false)
	self.m_selfSeatArrow:setVisible(false)
	
	self.m_txFold:setString(GameString.get("str_room_fold"))
	self.m_txCheck:setString(GameString.get("str_room_check"))
	self.m_txRaise:setString(GameString.get("str_room_raise"))
	self.m_txPreFold:setString(GameString.get("str_room_check_or_fold"))
	self.m_txPreCheck:setString(GameString.get("str_room_auto_check"))
	self.m_txPreRaise:setString(GameString.get("str_room_call_any"))
	self.m_txShowHand:setString(GameString.get("str_room_show_hand_card"))
	self.m_tx3X:setString(GameString.get("str_room_triple"))
	self.m_txAllIn2:setString(GameString.get("str_room_all_in"))
	self.m_tx75Pool:setString(GameString.get("str_room_three_quarter_pool"))
	self.m_txHalfPool:setString(GameString.get("str_room_half_pool"))
	self.m_txBack:setString(GameString.get("str_new_mtt_result_back"))
	self.m_txGameReview:setString(GameString.get("str_room_game_review_pop_up_title"))
end

function NormalRoomScene:initRoomView( )
	self:initSlotMachine()
end

function NormalRoomScene:setBtnShowHandVisible(isVisible)
	self.m_btnShowHand:setVisible(isVisible)
end

--[Comment]
--获取当前时间:时：分
function NormalRoomScene:setCurrentTime()
	self.m_scheduleTask = g_Schedule:schedule(function()
		self.m_txTime:setString(os.date("%H:%M"))
	end,5, 0)
end

function NormalRoomScene:onExit()
	ViewScene.onExit(self)
	if self.m_scheduleTask then
		self.m_scheduleTask:cancel()
		self.m_scheduleTask = nil
	end
end

function NormalRoomScene:showStandUpBtn(isStandUp)
	if isStandUp then
		self.m_btnStandImg:setTexture("creator/normalRoom/img/stand.png")
	else
		self.m_btnStandImg:setTexture("creator/normalRoom/img/switch.png")
	end
end

function NormalRoomScene:initAFKView() -- 比赛场暂离
	self.m_afkView = g_NodeUtils:getRootNodeInCreator('creator/mttRoom/layout/roomAFKView.ccreator')
	self:addChild(self.m_afkView)
	self.m_afkView:setZOrder(KZOrder.Scene + 30)
	
    self.m_btnLeaveTip  = g_NodeUtils:seekNodeByName(self.m_afkView,"btnLeaveTip")
    self.m_txAfkBg      = g_NodeUtils:seekNodeByName(self.m_afkView,"txAfkBg")
	self.m_txAfkTip     = g_NodeUtils:seekNodeByName(self.m_afkView,"txAfkTip")
	
    self:stopAfkInterval()
	self.m_btnLeaveTip:addClickEventListener(function(sender) self:onbtnAfkBgClick(sender) end)
end

function NormalRoomScene:initCardCalculatorView()
	g_Model:setData(g_ModelCmd.ROOM_CALCULATOR_DATA,{});
	g_Model:setData(g_ModelCmd.ROOM_CARD_TYPE,nil);
	self.m_viewCardCalculator = ccui.Button:create("creator/normalRoom/img/btnBg.png")
	self.m_viewCardCalculator:setPosition(cc.p(50, 120))
	self.m_root:addChild(self.m_viewCardCalculator)
	self.m_btnCardCalculator = ccui.Button:create("creator/normalRoom/img/iconCardType.png")
	self.m_btnCardCalculator:setAnchorPoint(0,0)
	self.m_btnCardCalculator:setPosition(cc.p(0,0))
	self.m_btnCardCalculator:setSwallowTouches(false)
	self.m_btnCardCalculator:addClickEventListener(
		function(sender)
			g_PopupManager:show(g_PopupConfig.S_POPID.POP_CARD_CALCULATOR)-- 算牌
		end
	)
	self.m_txPokerOdds = cc.Label:createWithSystemFont("", nil, 20)
	self.m_txPokerOdds:setAnchorPoint(0,0.5)
	self.m_txPokerOdds:setPosition(cc.p(90, 39))
	self.m_viewCardCalculator:addChild(self.m_txPokerOdds)
	self.m_viewCardCalculator:addChild(self.m_btnCardCalculator)
end

function NormalRoomScene:updateCardCalculator(str)
	if not self.m_txPokerOdds then
		return
	end
	self.m_txPokerOdds:setString(str)
end

function NormalRoomScene:initPublicCard()
	for i = 1, 5 do
		self["m_publicCard" .. i] = g_PokerCard:create()
		self["m_publicCard" .. i]:setTag(i+10)
		self["m_publicCard" .. i]:setVisible(false)
		self.m_publicCardNode:addChild(self["m_publicCard" .. i])
		g_NodeUtils:arrangeToCenter(self["m_publicCard" .. i], (i -3) * 90, 80)
	end
end

function NormalRoomScene:initRaiseSlider()
	self.m_raiseSlider       = ccui.Slider:create()
	self.m_raiseSlider:setContentSize(393, 32)
	self.m_raiseSlider:setPosition(10, 196)
	self.m_raiseSlider:setRotation(-90)
	self.m_sliderContainer:addChild(self.m_raiseSlider)
	self.m_raiseSlider:loadBarTexture("creator/normalRoom/img/allIn/progressBg.png")
	self.m_raiseSlider:loadSlidBallTextures("creator/normalRoom/img/allIn/progressBar.png")
	self.m_raiseSlider:loadProgressBarTexture("creator/normalRoom/img/allIn/progress.png")
end

function NormalRoomScene:initSoundSlider()
	self.m_soundSlider       = ccui.Slider:create()
	local size = self.m_soundSliderNode:getContentSize()
	self.m_soundSlider:setContentSize(size.width, size.height)
	self.m_soundSlider:setPercent(g_SettingConfig.getSliderPercent())
	self.m_soundSliderNode:addChild(self.m_soundSlider)
	g_NodeUtils:arrangeToCenter(self.m_soundSlider)
	self.m_soundSlider:setScale(1.2)
	self.m_soundSlider:loadBarTexture("creator/normalRoom/img/backMenu/sliderBg.png")
	self.m_soundSlider:loadSlidBallTextures("creator/normalRoom/img/backMenu/sliderBtn.png")
	self.m_soundSlider:loadProgressBarTexture("creator/normalRoom/img/backMenu/slider.png")
end

function NormalRoomScene:initShakeSwitch()
	if g_SettingConfig.getShakeSwitch() then
		self.m_rbShake:setSelected(true)
		self.m_shakeIcon:setTexture("creator/normalRoom/img/backMenu/shakeIcon.png")
	else
		self.m_rbShake:setSelected(false)
		self.m_shakeIcon:setTexture("creator/normalRoom/img/backMenu/soundIcon.png")
	end
end

function NormalRoomScene:initListener()
	self.m_btnStand:addClickEventListener(handler(self,self.onStandClick))
	self.m_btnFold:addClickEventListener(handler(self,self.onFoldClick))
	self.m_btnCheck:addClickEventListener(handler(self,self.onCheckClick))
	self.m_btnRaise:addClickEventListener(handler(self,self.onRaiseClick))
	self.m_raiseSlider:addEventListener(handler(self,self.onRaiseSliderTouch))
	self.m_soundSlider:addEventListener(handler(self,self.onSoundSliderTouch))
	self.m_rbShake:addEventListener(handler(self,self.onShakeTouch))
	self.m_btnMenu:addClickEventListener(handler(self,self.onBtnMenuClick))
	self.m_btnShop:addClickEventListener(handler(self,self.onBtnShopClick))
	self.m_btnTask:addClickEventListener(handler(self,self.onBtnTaskClick))
	self.m_dealerView:addClickEventListener(handler(self,self.onDealerClick))
	self.m_btnAllIn:addClickEventListener(handler(self,self.onBtnAllInClick))
	self.m_btnAllIn2:addClickEventListener(handler(self,self.onBtnAllInClick))
	self.m_btn3X:addClickEventListener(handler(self,self.onBtn3XClick))
	self.m_btnHalfPool:addClickEventListener(handler(self,self.onBtnHalfPoolClick))
	self.m_btn75Pool:addClickEventListener(handler(self,self.onBtn75PoolClick))
	self.m_btnShowHand:addClickEventListener(handler(self,self.onBtnShowHandClick))
	self.m_menuNode:addClickEventListener(handler(self,self.onBackgroundClick))
	self.m_btnBack:addClickEventListener(handler(self,self.onBtnBackClick))
	self.m_btnGameReview:addClickEventListener(handler(self,self.onBtnGameReview))
	self.m_btnChat:addClickEventListener(handler(self,self.onBtnChatClick))

	g_Model:watchData(g_ModelCmd.ROOM_DATA, self, self.onRoomDataChange, false)
	g_Model:watchData(g_ModelCmd.ROOM_CHAT_DATA, self, self.getRoomChatData, false)
	g_Model:watchData(g_ModelCmd.ROOM_SMALL_LABA_DATA,self,self.onSmallLabaMessage,false)
	g_Model:watchData(g_ModelCmd.ROOM_EXPRESSION_DATA,SeatManager, SeatManager.playExpression,false)
	g_Model:watchData(g_ModelCmd.ROOM_CHAT_DATA,SeatManager, SeatManager.chatBubble,false)

	g_Model:watchData(g_ModelCmd.DEALER_LIST, self, self.dealerDefalut, true)
	g_Model:watchData(g_ModelCmd.SELECTED_DEALER, self, self.dealerChange, false)
	g_Model:watchData(g_ModelCmd.ROOM_HEARTBEAT_TIMEOUT_TIMES, self, self.setWifi, false)

	-- g_Model:watchData(g_ModelCmd.ROOM_EXPRESSION_DATA,SeatManager, SeatManager.playExpression,false)
	-- g_Model:watchData(g_ModelCmd.ROOM_CHAT_DATA,SeatManager, SeatManager.chatBubble,false)
end

function NormalRoomScene:setWifi(times)
	if not tonumber(times) then return end
	if times > 3 then
		self.m_imgWifi:setTexture("creator/normalRoom/img/wifi_off.png")
	elseif times >= 0 then
		self.m_imgWifi:setTexture("creator/normalRoom/img/wifi_" .. tostring(3 - times) .. ".png")
	end
end

function NormalRoomScene:initDealer()
	self.m_dealer = NetImageView:create('',"creator/normalRoom/img/dealer_default.png")
	self.m_dealerView:addChild(self.m_dealer)
	local size = self.m_dealerView:getContentSize()
	self.m_dealer:setPosition(cc.p(size.width/2,size.height/2))
end

--@desc: 初始化活动入口
function NormalRoomScene:initWebEntranceView()
	if self:overrideForbidWebEntrance() then return end

	local hallIcon = g_AccountInfo:getHallIcon()
	if hallIcon.icon == nil then return end
	
	local cdnUrl = g_AccountInfo:getCDNUrl() or ""
	local url = cdnUrl .. hallIcon.icon;
	local webEntranceView = NetImageView:create(url, "creator/normalRoom/img/webViewEntrance.png", self, function(self, params)
		if self.m_webEntranceView then
			self.m_webEntranceView:setVisible(true)
		end
	end)
	:addTo(self:getRoot())
	:align(display.RIGHT_TOP , cc.p(display.right-195, display.top - 13))
	:setLocalZOrder(1)
	:setTouchEnabled(true)
	:ignoreContentAdaptWithSize(false)

	webEntranceView:setVisible(false)
	webEntranceView:setContentSize(cc.size(68, 68))
	webEntranceView:addClickEventListener(function(sender)
		if g_SystemInfo.isWindows() then
			g_AppManager:openURL(tostring(hallIcon.url))
		else
			local ActivityWebInfo = import('app.scenes.activity').ActivityWebInfo
			local callJS = ActivityWebInfo:defaultCallJs()
			local webInfo = ActivityWebInfo.new(tostring(hallIcon.url))
			webInfo:setCallJS(callJS)
			webInfo:setReCreate(false)
			webInfo:setForcedDisplay(true)
			webInfo:setX(0)
			webInfo:setY(0)
			webInfo:setFull(true)
			g_PopupManager:show(g_PopupConfig.S_POPID.ACTIVITY_WEB_POP, webInfo)
		end
	end)

	self.m_webEntranceView = webEntranceView
end

function NormalRoomScene:dealCard(startId)
	local players = g_RoomInfo:getPlayerList()
	if not players then return end
	
	local seatId = startId
	local t = 0
	self.m_dealCardTimers = {}
	for i = 1,18 do
		if seatId > 9 then seatId = seatId - 9 end
	
		local seat = SeatManager:getSeat(seatId)
		local seatView = seat:getView()
		if players[seatId] then
			self.m_dealCardTimers[#self.m_dealCardTimers + 1] = g_Schedule:schedulerOnce(function()
				local poker = g_PokerCard:create()
				poker:showBack()
				poker:setScale(0.5)
				self:addChild(poker)
				g_NodeUtils:arrangeToCenter(poker,20,100)
				local p = seat:getPokerPos(i <= 9 and 1 or 2)
				local curAction  = cc.MoveTo:create(0.2, p)
				local actionFunc = cc.CallFunc:create(function ()
					seat:onDealCard(i <= 9 and 1 or 2)
					poker:removeFromParent(true)
				end)
				local sequenceAction = cc.Sequence:create(curAction,actionFunc)
				poker:runAction(sequenceAction)
				
			end,t)
			t = t + 0.15
		end
		seatId = seatId + 1
	end
end

function NormalRoomScene:getRoomChatData(data)
	if data then
		self.m_chatData = data
        self.m_chatData.type = 1
		self:requesUserIcon(data)
		self:setChatHint(data)
	end
end

function NormalRoomScene:onSmallLabaMessage(data)
    if not g_TableLib.isEmpty(data) then 
        self:setChatHint(data)
        self.m_chatData = data
		self:requesUserIcon(data)
    end
end

function NormalRoomScene:setChatHint(data)
	self.m_txChatHint:removeAllElements()
	

	local re1 = ccui.RichElementText:create(1, cc.c3b(104,163,229), 255, data.senderName,nil, 20) 
	local re2 = ccui.RichElementText:create(2, cc.c3b(254,254,254), 255, "："..data.message, nil, 20)
	self.m_txChatHint:pushBackElement(re1)
	self.m_txChatHint:pushBackElement(re2)

	self.m_txChatHint:formatText()
	local s = self.m_txChatHint:getContentSize()
	if s.height > 50 then
		--local x,y = self.m_txChatHint:getPosition()
		
		self.m_txChatHint:setPositionY(-s.height/2 + 50)
	else
		self.m_txChatHint:setPositionY(25)
	end
	--self.m_layoutChat:forceDoLayout()

end

function NormalRoomScene:requesUserIcon(chatData)
	if g_TableLib.isEmpty(chatData) then
		return 
	end
	local uid = chatData.senderUid
	local params = HttpCmd:getMethod(HttpCmd.s_cmds.USER_OTHER_MAIN)
	params.puid = uid

	local onUserInfoResp = function(obj,isSuccess,data)
		if isSuccess and not g_TableLib.isEmpty(data) and self and chatData then
			local list = g_Model:getData(g_ModelCmd.ROOM_CHAT_HISTORY)
			list = list or {}
			table.insert(list, {["senderName"]=chatData.senderName,["message"]=chatData.message,["type"]=chatData.type or 1,["senderUid"] = chatData.senderUid,["picture"] = data.s_picture})
			g_Model:setData(g_ModelCmd.ROOM_CHAT_HISTORY,list)
		end	
	end

	g_HttpManager:doPost(params,self,onUserInfoResp)
end

--[[function NormalRoomScene:onUserInfoResp(isSuccess,data)
	if isSuccess and not g_TableLib.isEmpty(data) and self and self.m_chatData then
		local list = g_Model:getData(g_ModelCmd.ROOM_CHAT_HISTORY)
		list = list or {}
		table.insert(list, {["senderName"]=self.m_chatData.senderName,["message"]=self.m_chatData.message,["type"]=self.m_chatData.type or 1,["senderUid"] = self.m_chatData.senderUid,["picture"] = data.s_picture})
		g_Model:setData(g_ModelCmd.ROOM_CHAT_HISTORY,list)
	end	
end]]

function NormalRoomScene:updatePublicCard(publicCard)
	if g_TableLib.isEmpty(publicCard) then self:hidePublicCard() return end
	Log.d("NormalRoomScene:updatePublicCard", publicCard)
	if type(publicCard) == "table" then
		for i = 1, #publicCard do
			self["m_publicCard" .. i]:setCard(publicCard[i])
			self["m_publicCard" .. i]:showCard()
		end
	end
	g_EventDispatcher:dispatch(g_SceneEvent.ROOM_OPERATION_HANDLER)
end

function NormalRoomScene:onCardFlop(data)
	local isAllInOver = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
	local func = function ()
		self:showPublicCard(1,data[1])
		self:showPublicCard(2,data[2])
		self:showPublicCard(3,data[3], function ()
			if isAllInOver then
				ChipManager:playSequenceAnim()
			end
		end)
		g_SoundManager:playEffect(g_SoundMap.effect.DealPublicCard)
	end
	if isAllInOver then
		ChipManager:addSequenceAnim(func)
	else
		func()
	end
end

function NormalRoomScene:onCardTurn(data)
	local isAllInOver = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
	local func = function ()
		self:showPublicCard(4,data[4], function ()
			if isAllInOver then
				ChipManager:playSequenceAnim()
			end
		end)
		g_SoundManager:playEffect(g_SoundMap.effect.DealPublicCard)
	end
	if isAllInOver then
		ChipManager:addSequenceAnim(func)
	else
		func()
	end
end

function NormalRoomScene:onCardRiver(data)
	local isAllInOver = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
	local func = function ()
		self:showPublicCard(5,data[5], function ()
			if isAllInOver then
				ChipManager:playSequenceAnim()
			end
		end)
		g_SoundManager:playEffect(g_SoundMap.effect.DealPublicCard)
	end
	if isAllInOver then
		ChipManager:addSequenceAnim(func)
	else
		func()
	end
end

function NormalRoomScene:showPublicCard(index, value,callBack)
	self["m_publicCard" .. index]:setCard(value)
	self["m_publicCard" .. index]:setVisible(true)
	self["m_publicCard" .. index]:showBack()
	self["m_publicCard" .. index]:flipCardStage1(callBack)
end

function NormalRoomScene:resetPublicCard()
	for i =1, 5 do
		self["m_publicCard" .. i]:removeCardOverlay()
	end
end

function NormalRoomScene:fadePublicCard()
	for i =1, 5 do
		self["m_publicCard" .. i]:showFadeCard()
	end
end

function NormalRoomScene:hidePublicCard()
	for i =1, 5 do
		self["m_publicCard" .. i]:setVisible(false)
	end
end

function NormalRoomScene:highlightPublicCard(winnerInfo, isGameOver)
	self:resetPublicCard()
	if type(winnerInfo) == "table" then
		for i = 1,5 do
			for j = 1, 5 do
				local card = self["m_publicCard" .. j]
				if card:getCard() == winnerInfo["card" .. i] then
					card:showHighLight()
				end
			end
		end
		if isGameOver then
			for i = 1,5 do
				local card = self["m_publicCard" .. i]
				if not card:isHighLight() then
					card:showFadeCard()
				end
			end
		end
	end
end

function NormalRoomScene:showPokerTypeTips(type)
	if not type then return end
	self.m_typeTipsBg:setVisible(true)
	self.m_typeTips:setString(type)
	local size = self.m_typeTips:getContentSize()
	self.m_typeTipsBg:setContentSize(size.width + 20, size.height)
	g_NodeUtils:arrangeToCenter(self.m_typeTipsBg,0, 10)
	g_NodeUtils:arrangeToCenter(self.m_typeTips)
end

function NormalRoomScene:hidePokerTypeTips()
	self.m_typeTipsBg:setVisible(false)
end

function NormalRoomScene:onOperation(type)
	if type == Seat.SEAT_RAISE or type == Seat.SEAT_ALLIN then
		self.m_rbPreCheck:setSelected(false)
	end
end

function NormalRoomScene:updatePreOperation(data)
	local isInGame = SeatManager:selfInGame()
	local isSelfOperate = SeatManager:getSeat(data:getBetInSeatId()) and SeatManager:getSeat(data:getBetInSeatId()):isSelf()
	if isInGame and  (not isSelfOperate) and (not SeatManager:getSelfSeat():isAllIn()) then
		self.m_preOperationNode:setVisible(true)
	else
		self.m_preOperationNode:setVisible(false)
		return
	end
	local chips = math.min(g_RoomInfo:getUserChips(), SeatManager:getSelfCallNeedChips())
	
	if chips > 0 then
		self.m_txPreCheck:setString(string.format(GameString.get("str_room_auto_call"),g_MoneyUtil.formatMoney(chips)))
	else
		self.m_txPreCheck:setString(GameString.get("str_room_auto_check"))
	end
end

function NormalRoomScene:getPreOperationType()
	local type = -1
	if self.m_rbPreFold:isSelected() then
		type = NormalRoomSceneCtr.preOperationType.preFold
	elseif self.m_rbPreCheck:isSelected() then
		type = NormalRoomSceneCtr.preOperationType.preCheck
	elseif self.m_rbPreRaise:isSelected() then
		type = NormalRoomSceneCtr.preOperationType.preRaise
	end
	return type
end

function NormalRoomScene:resetPreOperation()
	self.m_rbPreFold:setSelected(false)
	self.m_rbPreCheck:setSelected(false)
	self.m_rbPreRaise:setSelected(false)
end

function NormalRoomScene:updateOperation(data)
	local seat = SeatManager:getSeat(data:getBetInSeatId())
	if seat and seat:isSelf() then
		self.m_operation:setVisible(true)
		self.m_txRaise:setString(GameString.get("str_room_raise"))
	else
		self:hideOperation()
	end
	
	local callNeedChips = data:getCallNeedChips()
	local selfMoney = g_RoomInfo:getUserChips()
	local minRaise = g_RoomInfo:getMinRaiseChips()
	
	if selfMoney <= callNeedChips then
		self.m_btnRaise:setEnabled(false)
		self.m_btnRaise:setColor(cc.c3b(124, 124 ,124))
	else
		self.m_btnRaise:setEnabled(true)
		self.m_btnRaise:setColor(cc.c3b(255, 255 ,255))
		if selfMoney <= minRaise then
			self.m_txRaise:setString(GameString.get("str_room_all_in"))
		else
			self.m_txRaise:setString(GameString.get("str_room_raise"))
		end
	end
	if callNeedChips == g_RoomInfo:getMaxRaiseChips() then
		self.m_btnRaise:setEnabled(false)
		self.m_btnRaise:setColor(cc.c3b(124, 124 ,124))
	end
	if callNeedChips > 0 then
		self.m_txCheck:setString(string.format(GameString.get("str_room_call"), g_MoneyUtil.formatMoney(callNeedChips)))
		self.m_btn3X:setEnabled(true)
		self.m_btn3X:setGray(false)
	else
		self.m_txCheck:setString(GameString.get("str_room_check"))
		self.m_btn3X:setEnabled(false)
		self.m_btn3X:setGray(true)
	end
end

function NormalRoomScene:hidePreOperation()
	self.m_preOperationNode:setVisible(false)
end

function NormalRoomScene:hideOperation()
	self.m_operation:setVisible(false)
	self.m_raiseNode:setVisible(false)
end

function NormalRoomScene:lightTo(seatId, tweenDuration)
	Log.d("NormalRoomScene:lightTo", seatId)
	self.m_lightId = seatId
	if seatId < 1 then
		self.m_tableLight:setVisible(false)
		return
	end
	tweenDuration = tweenDuration or 0.2
	self.m_tableLight:setVisible(true)
	local posId = SeatManager:getSeat(seatId):getPosId()
	if posId and posId > 0 then
		self.m_tableLight:setRotation(SeatAnim.seatPos[posId], tweenDuration)
	else
		self.m_tableLight:setVisible(false)
	end
end

function NormalRoomScene:moveBanker()
	local id =  self:getBankerPosId()
	if not id or id == self.m_bankerId then return end
	
	local anr = self.m_bankerNode:getAnchorPoint()
	local size = self.m_bankerNode:getContentSize()
	local p = NormalRoomScene.BankerPos[id]
	local action = cc.MoveTo:create(0.2,cc.p(p.x + size.width * anr.x,p.y + size.height * anr.y))
	self.m_banker:setVisible(true)
	self.m_banker:stopAllActions()
	self.m_banker:runAction(action)
	self.m_bankerId = id
end

function NormalRoomScene:setBankerPos()
	local id = self:getBankerPosId()
	if id then
		local anr = self.m_bankerNode:getAnchorPoint()
		local size = self.m_bankerNode:getContentSize()
		local p = NormalRoomScene.BankerPos[id]
		self.m_banker:setPosition(cc.p(p.x + size.width * anr.x,p.y + size.height * anr.y))
		self.m_banker:setVisible(true)
		self.m_bankerId = id
	end
end

--[[
    @desc: 重写返回事件回调方法
    author:{author}
    time:2019-02-20 14:50:42
    @return:
]]
function NormalRoomScene:onEventBack()
	if self.m_slotMachine then
		if self.m_slotMachine.m_slotMachine and self.m_slotMachine:onBackEvent() then
			return
		end
	end
	if g_AlertDialog.getInstance():isShow() then return end
	
	self:doLogic("onBack")
end

function NormalRoomScene:setInfo()
	self.m_infoTx:setString(string.format(GameString.get("str_room_info"), g_RoomInfo:getTid(), g_MoneyUtil.formatMoney(g_RoomInfo:getSmallBlind()), g_MoneyUtil.formatMoney(g_RoomInfo:getSmallBlind() * 2)))
	self:setSuperLotto()
	self:setBankerPos()
end

function NormalRoomScene:setSuperLotto()
	if self.m_enableSuperLotto and g_RoomInfo:getSmallBlind() >= g_AccountInfo:getSuperLottoSb() then
		self:initSuperLotto(true)
		if g_Model:getData(g_ModelCmd.LOTTO_IS_NEXT_BUY) then
			g_EventDispatcher:dispatch(g_SceneEvent.SUPER_LOTTO_BUY_NEXT)
		end
		if g_Model:getData(g_ModelCmd.LOTTO_IS_AUTO_BUY) then
			g_EventDispatcher:dispatch(g_SceneEvent.SUPER_LOTTO_AUTO_BUY)
		end
	else
		self:initSuperLotto(false)
	end
end

function NormalRoomScene:getBankerPosId()
	local seat = SeatManager:getSeat(g_RoomInfo:getDealerSeatId())
	if not seat then
		self.m_banker:setVisible(false)
		return nil
	end
	local seatView = seat:getView()
	return seatView.m_curPosId
end

function NormalRoomScene:onbtnAfkBgClick()
	self:doLogic("requestBackSeat")
	self:stopAfkInterval()
end

function NormalRoomScene:onStandClick()
	self:doLogic("onStandClick")
end

function NormalRoomScene:onFoldClick()
	self:doLogic("fold")
end

function NormalRoomScene:onCheckClick()
	self:doLogic("check")
end

function NormalRoomScene:onBtnAllInClick()
	self:doLogic("allIn")
end

function NormalRoomScene:onBtn3XClick()
	self:doLogic("raise3X")
end

function NormalRoomScene:onBtnHalfPoolClick()
	self:doLogic("raiseHalfPool")
end

function NormalRoomScene:onBtn75PoolClick()
	self:doLogic("raise75Pool")
end

function NormalRoomScene:onBtnShowHandClick()
	self:doLogic("requestShowHand")
	self.m_btnShowHand:setVisible(false)
end

function NormalRoomScene:onDealerClick()
g_PopupManager:show(g_PopupConfig.S_POPID.DEALER_POP)
end

function NormalRoomScene:dealerDefalut(heguanData)
	local heguanId = g_AccountInfo:getDefaultHeguan()
	if heguanData then
		for i=1,#heguanData do
			if heguanData[i].heguan_id == heguanId then
				local url =  g_AccountInfo:getCDNUrl() .. (heguanData[i].mbpic or '')
				self.m_dealer:setUrlImage(url)
				local deltaY = DealerConfig.TABLE_DELTAY[heguanId] or 0
				local size = self.m_dealerView:getContentSize()
				self.m_dealer:setPosition(cc.p(size.width/2,size.height/2+deltaY))
			end
		end
	end
end

function NormalRoomScene:dealerChange(heguanId)
	local heguanData = g_Model:getData(g_ModelCmd.DEALER_LIST)
	if heguanData then
		for i=1,#heguanData do
			if heguanData[i].heguan_id == heguanId then
				local url =  g_AccountInfo:getCDNUrl() .. (heguanData[i].mbpic or '')
				self.m_dealer:setUrlImage(url)
				local deltaY = DealerConfig.TABLE_DELTAY[heguanId]  or 0
				local size = self.m_dealerView:getContentSize()
				self.m_dealer:setPosition(cc.p(size.width/2,size.height/2+deltaY))
			end
		end
	end
end

function NormalRoomScene:onRaiseClick()
	local selfMoney = g_RoomInfo:getUserChips()
	if selfMoney  <= g_RoomInfo:getMinRaiseChips() then
		self:doLogic("raise", selfMoney)
		return
	end
	
	local isVisible = self.m_raiseNode:isVisible()
	if isVisible then
		local money = math.min(selfMoney, g_RoomInfo:getMaxRaiseChips()) - g_RoomInfo:getMinRaiseChips()
		local raiseMoney = g_RoomInfo:getMinRaiseChips() + money * self:getRaiseSliderPercent()
		self:doLogic("raise", raiseMoney)
	else
		self.m_raiseSlider:setPercent(12)
		self:updateRaiseTx()
		self.m_txRaise:setString(GameString.get("str_room_confirm"))
	end
	self.m_raiseNode:setVisible(not isVisible)
end

function NormalRoomScene:updateRaiseTx()
	local money = math.min(g_RoomInfo:getUserChips(), g_RoomInfo:getMaxRaiseChips()) - g_RoomInfo:getMinRaiseChips()
	local percent = self:getRaiseSliderPercent()
	local str = g_MoneyUtil.formatMoney(math.abs(g_RoomInfo:getMinRaiseChips() + money * percent))
	self.m_txRaiseNum:setString(str)
	self.m_btnAllIn:setVisible(percent == 1)
end

function NormalRoomScene:onRaiseSliderTouch(sender, eventType)
	--if eventType  == 0 then
		Log.d("NormalRoomScene:onRaiseSliderTouch",sender:getPercent())
		if sender:getPercent() > 88 then
			sender:setPercent(88)
		elseif sender:getPercent() < 12 then
			sender:setPercent(12)
		end
		self:updateRaiseTx()
	--end
end

function NormalRoomScene:onShakeTouch(ref, eventType)
	if ref:isSelected() then
		g_SettingConfig.setShakeSwitch(true)
		self:doLogic("shake")
	else
		g_SettingConfig.setShakeSwitch(false)
	end
	self:initShakeSwitch()
end

local index = 0
function NormalRoomScene:onSoundSliderTouch(ref, eventType)
	index = index + 1
	if index % 2 == 0 then
		return
	end
	local percent = ref:getPercent()
	g_SoundManager:setMusicVolume(percent / 100.00)
	g_SoundManager:setEffectsVolume(percent / 100.00)
	g_SettingConfig.setSliderPercent(ref:getPercent())
end

function NormalRoomScene:onBtnBackClick()
	self.m_menuNode:setVisible(false)
	self:overrideExitRoomTipsIfNeed()
end

function NormalRoomScene:onBtnGameReview()
	self.m_menuNode:setVisible(false)
	g_PopupManager:show(g_PopupConfig.S_POPID.ROOM_GAME_REVIEW_POP)
end

function NormalRoomScene:onBtnChatClick()
	g_PopupManager:show(g_PopupConfig.S_POPID.ROOM_CHAT_POP)
end

-- @desc: 立刻退出房間
function NormalRoomScene:exitRoom()
	self:doLogic("onBack")
end

function NormalRoomScene:onBackgroundClick()
	self.m_menuNode:setVisible(false)
end

function NormalRoomScene:onBtnTaskClick()
	g_PopupManager:show(g_PopupConfig.S_POPID.ROOMTASK_POP)
end

function NormalRoomScene:onBtnShopClick()
	g_PopupManager:show(g_PopupConfig.S_POPID.POP_STORE)
end

function NormalRoomScene:onBtnMenuClick()
	self.m_menuNode:setVisible(true)
end

function NormalRoomScene:getRaiseSliderPercent()
	local percent = self.m_raiseSlider:getPercent() or 12
	return tonumber(string.format("%.2f", (percent - 12) / 76))
end

function NormalRoomScene:playSitDownAnim(user)
	local curOffset = SeatManager:getOffset()
	local tarOffset = 5 - user.seatId
	Log.d("NormalRoomScene:playSitDownAnim",curOffset,tarOffset)
	
	self:beforeSitDownAnim()
	local isNineTable = g_RoomInfo:getMaxSeatCount() == 9
	for i = 1,9 do
		local seatView = SeatManager:getSeat(i):getView()
		local tarId = isNineTable and (i + tarOffset - 1) % 9 + 1 or (i + tarOffset - 1) % 10 + 1
		if tarId == 10 then tarId = 0 end
		while tarId <= 0 do tarId = tarId + 9 end
		
		SeatAnim:play(seatView, tarId, function (view, params)
			local seat = SeatManager:getSeat(i)
			seat:updatePokerPos()
			seat:updateGiftBtnPos()
			ChipManager:refreshBet(seat:getPosId(), seat:getBetChips())
			if params and params[1] == 5 then
				self:setBankerPos()
				self:playSelfSeatAnim()
				self:lightTo(self.m_lightId or 0, 0)
			end
		end)
	end
end

function NormalRoomScene:hideSelfSeatArrow()
	self.m_selfSeatArrow:setVisible(false)
	g_NodeUtils:arrangeToCenter(self.m_selfSeatArrow)
	self.m_selfSeatArrow:stopAllActions()
end

function NormalRoomScene:playSelfSeatAnim()
	self.m_selfSeatArrow:setVisible(true)
	local action = cc.Sequence:create(
			cc.MoveBy:create(0.4, cc.p(0, -20)),
			cc.MoveBy:create(0.4, cc.p(0, 20)),
			cc.MoveBy:create(0.4, cc.p(0, -20)),
			cc.MoveBy:create(0.4, cc.p(0, 20)),
			cc.MoveBy:create(0.4, cc.p(0, -20)),
			cc.MoveBy:create(0.4, cc.p(0, 20)),
			cc.MoveBy:create(0.4, cc.p(0, -20)),
			cc.MoveBy:create(0.4, cc.p(0, 20)),
			cc.CallFunc:create(function () self.m_selfSeatArrow:setVisible(false) end)
	)
	self.m_selfSeatArrow:runAction(action)
end

--暂离 倒計時
function NormalRoomScene:stopAfkInterval()
	self.m_afkStartTime = nil
	self.m_isShowAfk    = false
	self.m_btnLeaveTip:setVisible(false)

	self.m_txAfkTip:setString(g_StringLib.substitute(GameString.get("str_room_operation_timeout_text"), g_TimeLib.secondTo0M0S(self.s_afkTotalSecond)));
	self.m_txAfkBg:setContentSize(self.m_txAfkTip:getContentSize().width + 14,36)

    if self.m_scheduleAfkTask then
        g_Schedule:cancel(self.m_scheduleAfkTask.eventObj)
    end
end 

function NormalRoomScene:startAfkInterval()

	if self.m_isShowAfk  then
		return
	end

	self:stopAfkInterval()
	self.m_isShowAfk = true
	self.m_btnLeaveTip:setVisible(true)
	self.m_scheduleAfkTask = g_Schedule:schedule(function()
		self:afkIntervalHandler()
	end,1,0,self.s_afkTotalSecond) 
end

function NormalRoomScene:afkIntervalHandler()
	self.m_afkStartTime = self.m_afkStartTime or os.time()

	local second = self.s_afkTotalSecond - (os.time() - self.m_afkStartTime)
    if(second % 1 >= 0.5) then
        second = math.modf(second) + 1;
    else
        second = math.modf(second);
	end
	
	if (second >= 0) then
		self.m_txAfkTip:setString(g_StringLib.substitute(GameString.get("str_room_operation_timeout_text"), g_TimeLib.secondTo0M0S(second)));
		self.m_txAfkBg:setContentSize(self.m_txAfkTip:getContentSize().width + 14,36)
	else
		self.m_txAfkTip:setString(g_StringLib.substitute(GameString.get("str_room_operation_timeout_text"), g_TimeLib.secondTo0M0S(0)));
		self.m_txAfkBg:setContentSize(self.m_txAfkTip:getContentSize().width + 14,36)
	end
end

function NormalRoomScene:showCardType(type)
	if not tonumber(type) or type < 1 then return end
	local str = GameString.get("str_room_card_type_" .. type)
	if str then
		self.m_cardTypeTips:setVisible(true)
		self.m_txCardType:setString(str)
	end
end

function NormalRoomScene:hideCardType()
	self.m_cardTypeTips:setVisible(false)
end

function NormalRoomScene:beforeSitDownAnim()
	self.m_banker:setVisible(false)
	ChipManager:hideAllBet()
end

--[Comment]
-- 发送互动道具、并播放动画
function NormalRoomScene:startHddj(data)
	local fromeView = g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.sendSeatId)
	local toView = data.receiveSeatId==10 and self.m_dealerView or g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.receiveSeatId)
	
	PropAnim:playPropAnim(data,self.m_table,fromeView,toView)
end

function NormalRoomScene:playAddFriendAnim(data)
	local fromeView = g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.sendSeatId)
	local toView = g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.receiveSeatId)
	PropAnim:playAddFriendAnim(data,self.m_table,fromeView,toView)
end

--赠送筹码成功
function NormalRoomScene:playSendChipsAnim(data)
	local fromeView = g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.senderSeatId)
	local toView = data.recieverSeatId==10 and self.m_dealerView or  g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.recieverSeatId)
	PropAnim:playSendChipAnim(data,self.m_table,fromeView,toView)
end

-- rebuy addon succ 筹码动画
function NormalRoomScene:playAddChipsAnim(chips,callBack)

	local mySeat = SeatManager:getSelfSeat()
	if not mySeat or not chips then
		return
	end

	local tp    = cc.p(mySeat:getView():convertToWorldSpaceAR(cc.p(0,0)))
	local chipP = self.m_dealerView:convertToWorldSpaceAR(cc.p(0,0))
	local chipT = ChipManager:takeOutChipInfos(chips)
	
	for i=#chipT,1,-1 do
		local chip = ChipManager:getChip(chipT[i].number):setPosition(chipP)
		self:addChild(chip)
		
		local action = cc.MoveTo:create(ChipManager.MOVE_POT_DURATION + (i-1) * ChipManager.MOVE_DELAY_DURATION, tp)
		local actionFunc = cc.CallFunc:create(function ()
			chip:removeFromParent(true)
			if i==#chipT and callBack then
				callBack()
			end
		end)
		local sequenceAction = cc.Sequence:create(action,actionFunc)
		chip:runAction(sequenceAction)
	end
end

function NormalRoomScene:playSendGiftAnim(data)
	if not data or data.sendSeatId==data.seatId then
		return
	end
	local fromeView = g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.sendSeatId)
	local toView = g_NodeUtils:seekNodeByName(self.m_seatContainer,"seat" .. data.seatId)
	local seatView = SeatManager:getSeat(data.seatId)
	PropAnim:playSendGiftAnim(data,fromeView,toView,seatView,self.m_table)
end

function NormalRoomScene:onBtnSuperLottoClick()
	self.m_detailBox:setVisible(true)
	self.m_treasureBox:setVisible(true)
end

function NormalRoomScene:onBtnDetailSuperLottoClick()
	g_PopupManager:show(g_PopupConfig.S_POPID.SUPER_LOTTO_POP)
end

function NormalRoomScene:refreshGameRoom()
	self.m_publicCardArr = {0x0, 0x0, 0x0, 0x0, 0x0}
end

function NormalRoomScene:clearTimer()
	if self.m_dealCardTimers then
		for _,id in pairs(self.m_dealCardTimers) do
			g_Schedule:cancel(id)
		end
	end
end

function NormalRoomScene:onCleanup()
	delete(self.m_treasureBoxView)
	ViewScene.onCleanup(self)
	self:clearAll()
	SeatManager:setOffset(0)
	self:stopAfkInterval()
	self:clearTimer()

	self:canelShowDealerActionTimeout()
	
	g_Model:unwatchData(g_ModelCmd.ROOM_DATA, self, self.onRoomDataChange)
	g_Model:unwatchData(g_ModelCmd.LOTTO_POOL,self, self.lottoPoolChange)
	g_Model:unwatchData(g_ModelCmd.ROOM_CHAT_DATA, self, self.getRoomChatData)
	g_Model:unwatchData(g_ModelCmd.ROOM_EXPRESSION_DATA,SeatManager, SeatManager.playExpressio)
	g_Model:unwatchData(g_ModelCmd.ROOM_CHAT_DATA,SeatManager, SeatManager.chatBubbl)
	g_Model:unwatchData(g_ModelCmd.DEALER_LIST, self, self.dealerDefalut)
	g_Model:unwatchData(g_ModelCmd.SELECTED_DEALER, self, self.dealerChange)
	g_Model:unwatchData(g_ModelCmd.ROOM_SMALL_LABA_DATA,self,self.onSmallLabaMessage)
	g_Model:unwatchData(g_ModelCmd.ROOM_HEARTBEAT_TIMEOUT_TIMES,self,self.setWifi)
end

--[[
    @desc: 初始化老虎机, 老虎机只出现在sng，普通场，私人房中
    author:{author}
    time:2019-01-15 16:13:04
    @return:
]]
function NormalRoomScene:initSlotMachine( )
	local roomType = g_RoomInfo:getRoomType()
	if roomType == g_RoomInfo.ROOM_TYPE_TOURNAMENT then
		return
	end

	local SlotMachine = import("app/scenes/slot").SlotMachine
	if not self.m_slotMachine then
		self.m_slotMachine = SlotMachine:create()
		g_NodeUtils:seekNodeByName(self.m_root, 'slotNode'):addChild(self.m_slotMachine)
	end
end

--@desc: 初始化大家乐（夺金岛）, 私人房重载了该函数。进行了自定义设置
--@visible: bool 是否显示
function NormalRoomScene:initSuperLotto(visible)
	self.m_btnSuperLottoDetail = g_NodeUtils:seekNodeByName(self.m_root, 'SuperLottoDetail')
	if visible then
		if not self.m_btnSuperLotto then
			self.m_btnSuperLotto = g_NodeUtils:seekNodeByName(self.m_root, 'btn_superLotto')
			self.m_btnSuperLotto:loadTextureNormal(switchFilePath("superLotto/btn_enter.png"))
			self.m_btnSuperLotto:loadTexturePressed(switchFilePath("superLotto/btn_enter.png"))
			self.m_btnSuperLotto:loadTextureDisabled(switchFilePath("superLotto/btn_enter.png"))
			self.m_txSuperLottoMoney = g_NodeUtils:seekNodeByName(self.m_root, 'tx_superLotto_money')
			self.m_txSuperLottoMoney:setString("...")
			g_Model:watchData(g_ModelCmd.LOTTO_POOL,self, self.lottoPoolChange, true)
			self.m_btnSuperLotto:addClickEventListener(handler(self,self.onBtnSuperLottoClick))
			self.m_btnSuperLottoDetail:addClickEventListener(handler(self,self.onBtnDetailSuperLottoClick))
			self.m_txSuperLotto = g_NodeUtils:seekNodeByName(self.m_root, 'tx_superLotto')
			self.m_txSuperLottoClick = g_NodeUtils:seekNodeByName(self.m_root, 'tx_superLotto_click')
			self.m_txSuperLotto:setString(GameString.get('str_superLotto_title'))
			self.m_txSuperLottoClick:setString(GameString.get('str_superLotto_click'))
			self.m_txSuperLottoClick:setSystemFontSize(g_AppManager:getAdaptiveConfig().SuperLotto.TextClickFontSize)

			self.m_txSuperLottoIcon = g_NodeUtils:seekNodeByName(self.m_root, 'superLotto_icon')
			self.m_txSuperLottoIcon:setTexture(switchFilePath("superLotto/btn_enter.png"))
		end

		if self.m_treasureBoxView:isTreasureBoxOpen() then
			self.m_btnTreasure = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxBg1')
			self.m_isShowSuperLotto = true
			self.m_btnTreasure:setOpacity(0)
			self.m_btnSuperLotto:setEnabled(false) 
			
			local callAction = cc.CallFunc:create(function(sender)
				self.m_isShowSuperLotto = not self.m_isShowSuperLotto 
				if self.m_isShowSuperLotto == true then
					self.m_btnSuperLotto:runAction(cc.FadeTo:create(0.5, 255))
					self.m_btnTreasure:runAction(cc.FadeTo:create(0.5, 0))
				else
					self.m_btnSuperLotto:runAction(cc.FadeTo:create(0.5, 0))
					self.m_btnTreasure:runAction(cc.FadeTo:create(0.5, 255))
				end
			end)
			self:runAction(cc.RepeatForever:create(cc.Sequence:create(cc.DelayTime:create(60),callAction)))
		else
			local treasureBox = g_NodeUtils:seekNodeByName(self.m_root, 'TreasureBox')
			local treasureBox1 = g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxBg1')
			treasureBox:setVisible(false)
			treasureBox1:setVisible(false)
		end
	else
		self.m_btnSuperLottoDetail = g_NodeUtils:seekNodeByName(self.m_root, 'SuperLottoDetail')
		self.m_btnSuperLottoDetail:setVisible(false)
	end

	self.m_treasureBoxLayout = g_NodeUtils:seekNodeByName(self, 'treasureBoxLayout')
	self.m_treasureBoxLayout:forceDoLayout()
	self.m_treasureBoxBg = g_NodeUtils:seekNodeByName(self, 'treasureBoxBg')
	local size = self.m_treasureBoxLayout:getContentSize()
	self.m_treasureBoxBg:setContentSize(size)
	if self.m_btnSuperLotto then
		self.m_btnSuperLotto:setVisible(visible)
	end
end

-- @desc: 退出房間提示
-- @overrideable: 可重写，不同房間類型子類可以重寫，以便做事件拦截
function NormalRoomScene:overrideExitRoomTipsIfNeed()
    self:exitRoom()
end

function NormalRoomScene:overrideForbidWebEntrance()
	return false
end

function NormalRoomScene:lottoPoolChange(value)
	if self.m_txSuperLottoMoney then
		if not value or tonumber(value)==0 then
			self.m_txSuperLottoMoney:setString("...")
		else
			self.m_txSuperLottoMoney:setString('$'..g_MoneyUtil.skipMoney(value))
		end
	end 
end

function NormalRoomScene:updateTreasureBoxView()

	if not self.m_treasureBoxView then
		self.m_treasureBoxView = TreasureBox:create(g_NodeUtils:seekNodeByName(self.m_root, 'treasureBoxView'))
	end
	self.m_treasureBoxView:updateTreasureBoxView()
end

function NormalRoomScene:clearAll()
	self.m_slotMachine = nil
    g_Model:setData(g_ModelCmd.ROOM_CHAT_HISTORY, {});
end

function NormalRoomScene:canelShowDealerActionTimeout()
	if self.m_showDealerActionTimeout then
		cc.Director:getInstance():getScheduler():unscheduleScriptEntry(self.m_showDealerActionTimeout)
	end
end

function NormalRoomScene:onShowDealerAction(data)

	self:canelShowDealerActionTimeout()
	local textIndex = (data.textIndex ~= nil) and data.textIndex or math.random(1, #self.m_dealerPhraseList);
	self.m_txDealerChat:setString(g_StringLib.substitute(self.m_dealerPhraseList[textIndex], data["userName"]));
 	self.m_dealerChatBubble:setVisible(true);
 	
    if g_AccountInfo:getId() == data["seatUid"] then
    	g_SoundManager:playEffect(g_SoundMap.effect["DEALER_VOICE_" .. tostring(textIndex + 1)])
    end

	local function callback(dt)
		if self.m_dealerChatBubble ~= nil then
	        self.m_dealerChatBubble:setVisible(false);
	    end
	end
    self.m_showDealerActionTimeout = cc.Director:getInstance():getScheduler():scheduleScriptFunc(callback, 4, false)
end


NormalRoomScene.s_eventFuncMap =  {
	[g_SceneEvent.ROOM_INIT_VIEW] = "initRoomView";
}

return NormalRoomScene