---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MartinLai.
--- DateTime: 2018/12/13 16:49
---

local SeatManager = class("SeatManager")
local SeatAnim = require("SeatAnim")
local Seat = require("Seat")
local ExpressionAnimConfig = import("app.scenes.chat").ExpressionAnimConfig

SeatManager.SEAT_MAP = {
	[2] = {3, 7};						--两人场座位ID
	[5] = {1, 3, 5, 7, 9};				--五人场坐位ID
	[9] = {1, 2, 3, 4, 5, 6, 7, 8, 9};	--九人场坐位ID
}

function SeatManager:ctor()
	self.m_seatMap = {}
	self.m_chatBubbleArr = {}
	self.m_sitDownSeatV ={}
	self.m_offset = 0
end

function SeatManager:init(seatContainer)
	for i =0,9 do
		local seatView = g_NodeUtils:seekNodeByName(seatContainer, 'seat' .. i)
		seatView:setVisible(false)
		local seat = Seat.new(seatView, i)
		self:add(i, seat)
		SeatAnim.seatPos[i] = cc.p(seatView:getPosition())
		seat:setPosId(i)
	end
end

function SeatManager:getInstance()
	if not SeatManager.s_instance then
		SeatManager.s_instance = SeatManager.new()
	end
	return SeatManager.s_instance
end

function SeatManager:add(index, seat)
	if not index then return end
	
	self.m_seatMap[index] = seat
end

function SeatManager:removeUser(index)
	if not index or not self.m_seatMap[index] then return end
	self.m_seatMap[index]:removeData()
end

function SeatManager:getSeat(index)
	if not index then return end
	
	return self.m_seatMap[index]
end

function SeatManager:cleanup()
	for k,v in pairs(self.m_seatMap) do
		delete(v)
		self.m_seatMap[k] = nil
	end
end

function SeatManager:selfInGame()
	if self:selfInSeat() then
		local selfSeat = self:getSeat(self:getSelfSeatId())
		return selfSeat:isInGame()
	end
end

function SeatManager:selfInSeat()
	return self:getSelfSeatId() > 0
end

function SeatManager:getSelfSeat()
	return self:getSeat(self:getSelfSeatId())
end

function SeatManager:getSelfSeatId()
	if not g_TableLib.isEmpty(self.m_seatMap) then
		for _,v in ipairs(self.m_seatMap) do
			if v:isSelf() then
				return v.m_data.seatId
			end
		end
	end
	return -1
end

function SeatManager:getSeatIdByUid(uid)
	if not g_TableLib.isEmpty(self.m_seatMap) then
		for i,v in ipairs(self.m_seatMap) do
			if not g_TableLib.isEmpty(v:getSeatData()) and v:getSeatData().uid==uid then
				return v:getSeatId()
			end
		end
	end
	return nil
end

function SeatManager:getSeatIds()
	local list = {}
	if not g_TableLib.isEmpty(self.m_seatMap) then
		for i,v in ipairs(self.m_seatMap) do
			if not g_TableLib.isEmpty(v:getSeatData()) then
				table.insert(list,v);
			end
		end
	end
	return list
end

function SeatManager:onLoginRoomSuccess(data)
	self.m_maxSeatCount = data:getMaxSeatCount()
	self.roomType    = data:getRoomType()
	self.countdown   = data:getBetInExpire()
	self:reSet()
	self:showUserSeat()
	
	local selfID = -1
	for _,v in pairs(data:getPlayerList()) do
		local userData = v
		Log.d("SeatManager:onLoginRoomSuccess", v)
		self:addUser(userData)
		if tonumber(userData.uid) == tonumber(g_AccountInfo:getId()) then
			selfID = userData.seatId
		end
	end
	
	g_Model:setData(g_ModelCmd.USER_SELF_SEAT_ID,selfID)
	if selfID ~= -1 then
		self:hideEmptySeat()
		if not g_RoomInfo:isMatch() then
			self:showInviteSeat()
		end
		self.m_offset = 5 - selfID
		self:updateSeatPos()
	end
end

function SeatManager:updateSeatPos()
	local isNineTable = g_RoomInfo:getMaxSeatCount() == 9
	for i = 1,9 do
		local seat = self.m_seatMap[i]
		local offset = self:getOffset()
		local tarId = isNineTable and (i + offset - 1) % 9 + 1 or (i + offset - 1) % 10 + 1
		if tarId == 10 then tarId = 0 end
		while tarId < 0 do tarId = tarId + 9 end
		seat:getView():setPosition(SeatAnim.seatPos[tarId].x, SeatAnim.seatPos[tarId].y)
		seat:setPosId(tarId)
	end
end


function SeatManager:showInviteSeat()
	if g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_TOURNAMENT 
    or g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_KNOCKOUT  then--锦标赛
		return
    end
	local seat = self:getSeat(self:getEmptySeatId())
	if seat then
		seat:showInvite()
	end
end

function SeatManager:hideEmptySeat()
	for _,seat in pairs(self.m_seatMap) do
		if seat:isEmpty() then
			seat:setVisible(false)
			seat:reSet()
		end
	end
end

function SeatManager:hideSeat()
	for _,seat in pairs(self.m_seatMap) do
		seat:setVisible(false)
	end
end

function SeatManager:showUserSeat()
	if g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_TOURNAMENT 
    or g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_KNOCKOUT then--锦标赛
		return
    end
	local seatMap = SeatManager.SEAT_MAP[self.m_maxSeatCount]
	if not seatMap then return end
	self:hideSeat()
	
	for _,v in pairs(seatMap) do
		local seat = self.m_seatMap[v]
		if seat then
			seat:setVisible(true)
			if seat:isEmpty() then
				seat:reSet()
			end
		end
	end
end


function SeatManager:reSet()
	for _,seat in pairs(self.m_seatMap) do
		seat:removeData()
	end
end

function SeatManager:addUser(userData)
	if not userData then return end

	local seat = self.m_seatMap[userData.seatId]
	seat:setSeatData(userData)
	seat:setVisible(true)
end

function SeatManager:setOffset(offset)
	self.m_offset = offset
end

function SeatManager:getOffset()
	return self.m_offset or 0
end

--[Comment]
-- 获取一个空座位的座位id
-- */
SeatManager.getEmptySeatId = function(self)
	local seatMap = SeatManager.SEAT_MAP[self.m_maxSeatCount]
	if seatMap then
		for _,v in pairs(seatMap) do
			local seatData = self.m_seatMap[v]:getSeatData()
			
			if not seatData or seatData.uid == -1 then
				return v
			end
		end
	end
	return -1;
end

function SeatManager:getSitDownSeat()
	local index = 1
    local sitDownSeat = {}
	if not g_TableLib.isEmpty(self.m_seatMap) then
		for k,v in pairs(self.m_seatMap) do 
			local data = v:getSeatData()
			if not g_TableLib.isEmpty(data) then
				sitDownSeat[index] = v
				index = index + 1
			end
		end
	end
	return sitDownSeat				
end

--[Comment]
--获得默认买入筹码数目
function SeatManager:getDefaultBuyInChips()
	local buyInChips = 0;
	local userChips = g_AccountInfo:getMoney()
	
	local minBuyIn = g_RoomInfo:getMinBuyIn()
	local maxBuyIn = g_RoomInfo:getMaxBuyIn()
	if  userChips < minBuyIn then--用户资产小于最小买入，买入失败
		buyInChips = 0;
	elseif userChips < maxBuyIn * 0.5 then --用户资产小于最大买入的1/2
		buyInChips = userChips;
	else
		buyInChips = maxBuyIn * 0.5;
	end
	return buyInChips;
end

function SeatManager:chatBubble(data)
	local seatId = -1;	
	self.m_sitDownSeatV = self:getSitDownSeat()
	if g_TableLib.isEmpty(data) or g_TableLib.isEmpty(self.m_sitDownSeatV) then return end

	if data.senderTid then --newChatData
		for i=1,#self.m_sitDownSeatV do
			if (self.m_sitDownSeatV[i]:getSeatData().uid == data.senderUid) then
				local seatId = self.m_sitDownSeatV[i]:getSeatId()
				if seatId > 0 then
					local userSeat = self.m_sitDownSeatV[i]
					userSeat:updateChatBubble(data)
				end
				break;
			end
		end
	elseif data.seatId~=nil then
		seatId = data.seatId;
	end
end

function SeatManager:playExpression(data)
	Log.d("play expression data= ",data)
	if g_TableLib.isEmpty(self.m_seatMap[data.seatId].m_data) then return end
	local uid = self.m_seatMap[data.seatId].m_data.uid
	if ((data.expressionId >= 1 and data.expressionId <= 30 or data.expressionId >= 61 and data.expressionId <= 90 or data.expressionId >= 10101 and data.expressionId <= 10112)
        and  uid ~= -1) then
        local userSeat = self.m_seatMap[data.seatId];
        userSeat:clearExpressionContainer()
        --每播放一次表情扣除相应的钱
        if(data.minusMoney > 0 and userSeat.m_data.seatChips >= data.minusMoney) then
			--if(userSeat and not LoginSuccData.isMatch(self.m_loginSuccData.roomType)) then --判断房间类型
			if userSeat then
                userSeat:setSeatChips(userSeat.m_data.seatChips - data.minusMoney);
                if(userSeat:isSelf()) then
                    userSeat:playExpressionMinusMoneyAnimation(data.minusMoney);
                end
            end
        end

		-- if not TutorialKit.isTutorial() then   --更新点击座位玩家信息面板的数据
			
		-- userData待实现
		-- if userSeat:isSelf() then
		-- 	local userData = g_Model:getData(g_ModelCmd.USER_DATA);
		-- 	userData.money = userData.money - data.minusMoney;
		-- 	g_Model:setData(g_ModelCmd.USER_DATA, userData);
		-- end


		userSeat:getSeatData().totalChips = userSeat:getSeatData().totalChips - data.minusMoney;
        -- end

        -- if self:getAppDeactivate() then
        --     return;
        -- end

        local expression = nil;
		if (data.expressionId >= 1 and data.expressionId <= 30 )then
			self:showExpression(data.expressionId,userSeat);
		elseif (data.expressionId >= 61 and data.expressionId <= 90) then
			local index = data.expressionId - 30
            self:showExpression(index,userSeat);
        elseif (data.expressionId >= 10101 and data.expressionId <= 10112) then
            local index = data.expressionId - 10040
            self:showExpression(index,userSeat);
        end
    end
end

function SeatManager:showExpression(index,userSeat)
	local seatView = userSeat:getView()
	local expressionContainer = userSeat:getExpressionContainer()
	-- seatView:addChild(expressionContainer)
	local animConfig = ExpressionAnimConfig.s_config[index]
	local pFile = animConfig["file"]
	local imgName = animConfig["name"]
	local frameLen = animConfig.num
	local dur = animConfig.duration --- 都是1s
	dur = dur/frameLen/1000

    local cache = cc.SpriteFrameCache:getInstance()
    cache:addSpriteFrames(pFile)
	local animFrames = {}

	for i = 1,frameLen do
		local str = string.format(imgName, i)
        local frame = cache:getSpriteFrame( string.format(imgName, i) )
        animFrames[i] = frame
    end
	local sprite = cache:getSpriteFrame( string.format(imgName, 1) )
	local expression = cc.Sprite:create()
	expressionContainer:addChild(expression)
	g_NodeUtils:arrangeToCenter(expression)

	local pParent = seatView:getParent()
	if pParent then
		--pParent = pParent:getParent()
		local wp = expression:convertToWorldSpace(cc.p(0,0))
	
		local tp =pParent:convertToNodeSpace(wp)
		expression:retain()
		expression:removeFromParent(false)
		pParent:addChild(expression)
		expression:release()
		expression:setPosition(tp)
	end

	local animation = cc.Animation:createWithSpriteFrames(animFrames, dur)
	animation:setLoops(3)
	animation:setRestoreOriginalFrame(true)
	
	expression:setVisible(true)
	expression:runAction(cc.Sequence:create(cc.Animate:create(animation),cc.CallFunc:create(function()
		expression:setVisible(false)
		expression:removeFromParent(true)
	end)))
end

function SeatManager:clear()
	for i = 1, 9 do
		local seat = self:getSeat(i)
		seat:hideHandCard()
		seat:resetHandCard()
		seat:setStatus(-1)
		seat:stopTimer()
	end
end

function SeatManager:loadVipBear(data)

end

function SeatManager:stopSeatTimer()

end

function SeatManager:selfInRound()
	return self.m_selfInRound
end

function SeatManager:getSelfSeat()
    if self:getSelfSeatId() ~= -1 then
        return self.m_seatMap[self:getSelfSeatId()];
    else
        return nil;
    end
end

function SeatManager:onUpdateSeatGiftIcon(data)
	for i = 1,9 do
		local seat = self.m_seatMap[i]
		if seat and not g_TableLib.isEmpty(seat:getSeatData()) and  tostring(seat:getSeatData().uid)==tostring(data.mid) then
			seat:updateGiftIcon(data.giftId,data.mid)
		end
	end
end

function SeatManager:antEnd()
    for i=1,9 do
		local seat = self.m_seatMap[i]
		if seat and not g_TableLib.isEmpty(seat:getSeatData()) then
			-- self.m_seatMap[i]:getSeatData().betInChips = 0;
			-- self.m_seatMap[i]:getSeatData().ante = 0;
		end
    end
end

function SeatManager:getSelfCallNeedChips()
	local maxBetInChips = 0
	for i = 1,9 do
		local seat = self.m_seatMap[i]
		if seat and seat:getSeatData() then
			local betInChips = seat:getSeatData().betInChips or 0
			maxBetInChips = math.max(maxBetInChips, betInChips)
		end
	end
	local selfSeat = self:getSelfSeat()
	local selfBetChips = 0
	if selfSeat:getSeatData() then
		selfBetChips = selfSeat:getSeatData().betInChips or 0
	end
	return maxBetInChips - selfBetChips
end

return SeatManager