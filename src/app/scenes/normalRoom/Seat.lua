---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MartinLai.
--- DateTime: 2018/12/13 16:50
---

local Seat = class("Seat")
local BehaviorExtend = import("framework.behavior").BehaviorExtend
local BehaviorMap = import("app.common.behavior").BehaviorMap
local RectTimer = import("app.common.customUI").RectTimer

Seat.s_status = {
	empty = 1;
	inviteFriend = 2;
	hasUser = 3;
}

Seat.SEAT_WAIT       = 0;  --等待下一轮
Seat.SEAT_READY      = 1;  --等待下注
Seat.SEAT_FOLD       = 2;  --弃牌
Seat.SEAT_ALLIN      = 3;  --ALL IN
Seat.SEAT_CALL       = 4;  --跟注
Seat.SEAT_SB         = 5;  --小盲
Seat.SEAT_BB         = 6;  --大盲
Seat.SEAT_CHECK      = 7;  --看牌
Seat.SEAT_RAISE      = 8;  --加注
Seat.MUST_RAISE      = 9;  --打必场必下注

Seat.m_cardType                 = 0;--玩家牌型

Seat.CARD_1_ROTATION = -4;
Seat.CARD_2_ROTATION = 10;

Seat.CHAT_BUBBLE_MAX_WIDTH = 280

function Seat:ctor(view, id)
	self.m_seatView = view
	self.m_id = id
	self:init()
end

function Seat:init()
	self.m_downArrow = g_NodeUtils:seekNodeByName(self.m_seatView, 'downArrow')
	self.m_inviteFriend = g_NodeUtils:seekNodeByName(self.m_seatView, 'inviteFriend')
	self.m_head = g_NodeUtils:seekNodeByName(self.m_seatView, 'head')
	self.m_moneyTx = g_NodeUtils:seekNodeByName(self.m_seatView, 'money')
	self.m_statusTx = g_NodeUtils:seekNodeByName(self.m_seatView, 'status')

	self.m_chatBubble = g_NodeUtils:seekNodeByName(self.m_seatView,"chatBubble")
	self.m_txChatBubble = g_NodeUtils:seekNodeByName(self.m_seatView,"chatLabel")
	self.m_expressionContainer = g_NodeUtils:seekNodeByName(self.m_seatView,"container")
	self.m_vipIcon = g_NodeUtils:seekNodeByName(self.m_seatView,"vip")
	self.m_seat = g_NodeUtils:seekNodeByName(self.m_seatView,"seatBtton")
	-- self.m_seat = g_NodeUtils:seekNodeByName(self.m_seatView,"seat")


	g_NodeUtils:convertTTFToSystemFont(self.m_statusTx)

	self.m_chatBubble:setVisible(false)
	
	local size = self.m_seatView:getContentSize()
	self.m_timer = RectTimer:create(size.width, size.height)
	self.m_timer:setVisible(false)
	self.m_seatView:addChild(self.m_timer)
	-- self:setSwallowTouches(true)

	BehaviorExtend(self.m_head)
	self.m_head:bindBehavior(BehaviorMap.HeadIconBehavior)
	self:initPoker()
	self:initGiftBtn()
	self:reSet()
	
	self.m_vipIcon:setLocalZOrder(1)
	
	self.m_seat:addClickEventListener(function()
		if self.m_status == Seat.s_status.hasUser then
			if not self.m_data then
				return
			end
			if tonumber(self.m_data.uid) == tonumber(g_AccountInfo:getId()) then
				g_PopupManager:show(g_PopupConfig.S_POPID.RANK_PLAYER_INFO_POP, self.m_data,true)
			else
				g_PopupManager:show(g_PopupConfig.S_POPID.OTHER_INFO_POP,self.m_data)
			end
			Log.d("onHeadClick", self.m_id)
		elseif self.m_status == Seat.s_status.inviteFriend then
			g_PopupManager:show(g_PopupConfig.S_POPID.ROOM_INVITE_FRIEND)
		else
			local buyData = {}
			buyData.seatId = self.m_id
			Log.d("onSeatClick", self.m_id)
			g_PopupManager:show(g_PopupConfig.S_POPID.ROOM_BUY_IN, buyData)
		end
	end)

end

function Seat:startTimer(time)
	self.m_timer:setVisible(true)
	self.m_timer:start(function ()
		self:stopTimer()
	end,time or 10)
	if self:isSelf() then
		self.m_sharkTimer = g_Schedule:schedulerOnce(function ()
			self:sharkHandCard()
			if g_SettingConfig.getShakeSwitch() then
				-- NativeEvent.getInstance():callNative(NativeCmd.KEY.KEY_SHAKE)
				cc.Device:vibrate(0.5)
			else
			
			end
		end,time * 0.7)
		self:startSound(time)
	end
end

function Seat:startSound(time)
	self.m_alertTimer1 = g_Schedule:schedulerOnce(function ()
		g_SoundManager:playEffect(g_SoundMap.effect.Alert)
	end,time * 0.1)
	self.m_alertTimer2 = g_Schedule:schedulerOnce(function ()
		g_SoundManager:playEffect(g_SoundMap.effect.Alert)
		g_Schedule:schedulerOnce(function ()
			g_SoundManager:playEffect(g_SoundMap.effect.Alert)
		end, 0.3)
	end,time * 0.6)

end

function Seat:stopTimer()
	self.m_timer:setVisible(false)
	self.m_timer:stop()
	self:stopSharkHandCard()
	g_Schedule:cancel(self.m_sharkTimer)
	g_Schedule:cancel(self.m_alertTimer1)
	g_Schedule:cancel(self.m_alertTimer2)
    if self.m_chatBubbleSchedul then
        g_Schedule:cancel(self.m_chatBubbleSchedul)
	end
end

function Seat:initGiftBtn()
	self.m_giftView  = g_NodeUtils:getRootNodeInCreator('creator/normalRoom/giftView.ccreator')
	self.m_giftBtn   = g_NodeUtils:seekNodeByName(self.m_giftView, 'giftBtn')
	self.m_giftFront = g_NodeUtils:seekNodeByName(self.m_giftView, 'giftFront')
	self.m_gift1     = g_NodeUtils:seekNodeByName(self.m_giftView, 'giftIcon')
	
	local NetImageView = import("app.common.customUI").NetImageView
	local giftImg = NetImageView:create(nil,"creator/normalRoom/img/gift.png")
	self.m_giftFront:addChild(giftImg)
	g_NodeUtils:arrangeToCenter(giftImg)
	self.m_giftFront = giftImg
	self.m_giftFront:setScale(0.6)
	self.m_gift1:setVisible(false)
	self.m_seatView:addChild(self.m_giftView)
	self.m_giftView:setLocalZOrder(10)

	self.m_giftBtn:setPressedActionEnabled(true)
	self.m_giftBtn:addClickEventListener(function(  )
		if not self.m_data then
			return
		end
		local data = {}
		data.friend = self.m_data.uid
		data.type = tostring(self.m_data.uid)==tostring(g_AccountInfo:getId()) and 4 or 3 -- GiftPop.s_showType.SHOW_SEND_GIFT_ROOM 
		g_EventDispatcher:dispatch(g_SceneEvent.OPEN_GIFT_POPUP,data);
	end)
end

function Seat:initPoker()
	self.m_poker1 = g_PokerCard:create()
	self.m_poker1:showBack()
	self.m_poker1:setScale(0.5)
	self.m_seatView:addChild(self.m_poker1)
	self.m_poker1:setRotation(Seat.CARD_1_ROTATION)
	self.m_poker1:setVisible(false)
	self.m_poker1:setLocalZOrder(11)
	
	self.m_poker2 = g_PokerCard:create()
	self.m_poker2:showBack()
	self.m_poker2:setScale(0.5)
	self.m_seatView:addChild(self.m_poker2)
	self.m_poker2:setRotation(Seat.CARD_2_ROTATION)
	self.m_poker2:setVisible(false)
	self.m_poker2:setLocalZOrder(11)
	self.m_poker1:setTag(1)
	self.m_poker2:setTag(2)
end

function Seat:setSeatData(data)
	self.m_data = data
	self.m_status = Seat.s_status.hasUser
	
	--self:fadeSeat();
	--self:sitDownAnimation(0);
	--self:setStanded(false);
	
	--需要考虑只有一个玩家在座但游戏尚未结束的情况
	--if data.playerCount == 1 then
	--	data.operationStatus = Seat.SEAT_WAIT;
	--end

	local clipPath = "creator/hall/header_bg.png"
	self.m_head:setHeadIcon(data.photoUrl, nil, nil, clipPath)
	self.m_head:setVisible(true)
	self.m_downArrow:setVisible(false)
	self.m_inviteFriend:setVisible(false)

	self:setSeatChips(data.seatChips)
	self:setStatus(data.operationStatus)
	--判断是否在玩
	if (data.operationStatus and data.operationStatus ~= Seat.SEAT_WAIT and data.operationStatus ~= Seat.SEAT_FOLD) then
		self.m_data.m_inGame = true;
		self:showHandCard()
		g_NodeUtils:seekNodeByName(self.m_head,"_head_icon"):setGray(false)
		self.m_vipIcon:setGray(false)
	else
		self:hideHandCard()
		g_NodeUtils:seekNodeByName(self.m_head,"_head_icon"):setGray(true)
		self.m_vipIcon:setGray(true)
	end
	self.m_giftView:setVisible(true)
	self:updateGiftBtnPos()
	
	--vip标识
	self.m_vipIcon:setVisible(false)
	local vipLevel = tonumber(data.vip)
	if vipLevel and vipLevel > 0 and vipLevel<5  then
		self.m_vipIcon:setVisible(true)
		self.m_vipIcon:setTexture("creator/store/vip_icon_" .. vipLevel .. ".png")
	end
	Log.d("Seat:setData", data)
end

function Seat:reSet()
	self.m_moneyTx:setString("")
	self.m_statusTx:setString("")
	self.m_head:removeIcon()
	self.m_downArrow:setVisible(true)
	self.m_inviteFriend:setVisible(false)
	self.m_head:setVisible(false)
	self.m_poker1:setVisible(false)
	self.m_poker2:setVisible(false)
	self.m_status = Seat.s_status.empty
	self.m_giftView:setVisible(false)
	self.m_chatBubble:setVisible(false)
	self.m_data = nil
end

function Seat:hideHandCard()
	self.m_poker1:setVisible(false)
	self.m_poker2:setVisible(false)
end

function Seat:setSeatChips(chips)
	if not tonumber(chips) then return end
	if chips < 0 then chips = 0 end
	if self:isSelf() then
		g_RoomInfo:setUserChips(chips)
	end
	
	self.m_moneyTx:setString(g_MoneyUtil.formatMoney(chips))
	self.m_data.seatChips = chips
	
	if self:isSelf() then
		g_Model:setData(g_ModelCmd.NEW_MTT_MY_SEATCHIPS,chips);
	end
end

function Seat:getSeatData()
	return self.m_data
end

function Seat:setVisible(visible)
	self.m_seatView:setVisible(visible)
end

function Seat:setPosition(x,y)
	self.m_seatView:setPosition(x,y)
end

function Seat:onGameStart()
	if self:isEmpty() then return end
	self:setInGame(true)
	self:setAllIn(false)
	g_NodeUtils:seekNodeByName(self.m_head,"_head_icon"):setGray(false)
	self.m_vipIcon:setGray(false)
end

function Seat:onDealCard(i)
	if not self.m_data or not self:isInGame() then return end
	self["m_poker" .. i]:setVisible(true)
	self["m_poker" .. i]:showBack()
	if self:isSelf() then
		local handCard = g_RoomInfo:getHandCard() or {2,3}
		self["m_poker" .. i]:refresh()
		self["m_poker" .. i]:showBack()
		self["m_poker" .. i]:setCard(handCard[i])
		self["m_poker" .. i]:flipCardStage1()
	end
	self:updatePokerPos()
	self:updateGiftBtnPos()
end

function Seat:showHandCard()
	self.m_poker1:setVisible(true)
	self.m_poker2:setVisible(true)
	if self:isSelf() then
		local handCard = g_RoomInfo:getHandCard() or {2,3}
		if g_TableLib.isEmpty(handCard) then return end
		self.m_poker1:refresh()
		self.m_poker2:refresh()
		self.m_poker1:setCard(handCard[1])
		self.m_poker2:setCard(handCard[2])
		self.m_poker1:showCard()
		self.m_poker2:showCard()
	else
		self.m_poker1:showBack()
		self.m_poker2:showBack()
	end
	self:updatePokerPos()
end

function Seat:foldCard()
	self:setInGame(false)
	g_NodeUtils:seekNodeByName(self.m_head,"_head_icon"):setGray(true)
	self.m_vipIcon:setGray(true)
	if not self.m_poker1 or not self.m_poker2 then return end
	if self:isSelf() then
		self:fadeHandCard()
	else
		local parent = self.m_seatView:getParent()
		local pSize = parent:getContentSize()

		local worldP = parent:convertToWorldSpace(cc.p(pSize.width / 2, pSize.height * 0.8 ))
		local p = self.m_seatView:convertToNodeSpace(worldP)
		local action1 = cc.MoveTo:create(0.3, p)
		local action2 = cc.MoveTo:create(0.3, p)
		local actionFunc = cc.CallFunc:create(function ()
			self.m_poker1:setVisible(false)
			self.m_poker2:setVisible(false)
			self:updatePokerPos()
		end)
		local sequenceAction = cc.Sequence:create(action1,actionFunc)
		self.m_poker1:runAction(sequenceAction)
		self.m_poker2:runAction(action2)
	end
end

function Seat:playExpressionMinusMoneyAnimation(moneyNum)
	-- if (Model.getData(ModelKeys.APP_DEACTIVATE)) then
    --     return;
    -- end
	
	local animContainer = cc.Node:create()
	self.m_expressionContainer:addChild(animContainer);
	g_NodeUtils:arrangeToTopCenter(animContainer)



	animContainer:setLocalZOrder(1)
	local minusMoneyIcon = cc.Sprite:create("creator/normalRoom/img/play-expression-minus-money-icon.png")
	animContainer:addChild(minusMoneyIcon)

	local minusMoneyLabel = cc.Label:createWithSystemFont("$"..g_MoneyUtil.formatMoney(moneyNum),g_DefaultFontName,24)
	minusMoneyLabel:setTextColor(cc.c4b(0xec, 0xce, 0x0b,0xff))
	animContainer:addChild(minusMoneyLabel)
	minusMoneyLabel:enableOutline(cc.c4b(0,0,0,255),4)
	
	
	local iconSize = minusMoneyIcon:getContentSize()
	local labelSize = minusMoneyLabel:getContentSize()
    local iconX ,iconY = minusMoneyIcon:getPosition()

    minusMoneyLabel:setPosition(cc.p(iconX+iconSize.width + 20,iconY+8));
    minusMoneyIcon:setPosition(cc.p(0,(labelSize.height - iconSize.height)/2));
	local seatSize = self.m_seatView:getContentSize() 
	animContainer:setPosition((seatSize.width - (iconSize.width+labelSize.width ))/2+10,130)
	local fadeAnim = cc.FadeTo:create(2,0.7)
	animContainer:runAction(fadeAnim)	
	local endCall = cc.CallFunc:create(function()
		animContainer:removeFromParent(true)
	end)


	local pParent = self.m_seatView:getParent()
	if pParent then
		local wp = animContainer:convertToWorldSpace(cc.p(0,0))
		local tp =pParent:convertToNodeSpace(wp)
		animContainer:retain()
		animContainer:removeFromParent(false)
		pParent:addChild(animContainer)
		animContainer:release()
		animContainer:setPosition(tp)
	end

	local size = self.m_head:getContentSize()
	local moveAction = cc.MoveBy:create(1,cc.p(0,-size.height-20))
	local fadeOut = cc.FadeOut:create(0.2)
	local spawn = cc.Spawn:create(
		moveAction,
		cc.Sequence:create(cc.DelayTime:create(0.8),fadeOut)
	)
	local sequenceAction = cc.Sequence:create(spawn,endCall)
	animContainer:runAction(sequenceAction)
	animContainer:setCascadeOpacityEnabled(true)

end

function Seat:updateGiftBtnPos()
	
	local size = self.m_giftView:getContentSize()
	if self:getPosId() >=4 then
		g_NodeUtils:arrangeToLeftCenter(self.m_giftView,-size.width/2+3)
	else
		g_NodeUtils:arrangeToRightCenter(self.m_giftView,size.width/2-3)
	end

	if not self.m_data or not self.m_data.giftId then
		return
	end
    self:updateGiftIcon(self.m_data.giftId,nil)
end

function Seat:updateGiftIcon(giftid,mid)
	
	if not giftid or giftid == 0 then 
		
		self.m_giftFront:setVisible(false)
		self.m_gift1:setVisible(true)
		return 
	end

	self.m_giftFront:setVisible(true)
	self.m_gift1:setVisible(false)
    local pre = g_AccountInfo:getGiftSWFURL()
    local map = g_Model:getData(g_ModelCmd.GIFT_ID_FILE_MAPPING)
	local url = ""
    local name = tostring(giftid)
    if type(pre) ~= "string" then
        pre = ""
    end
    if map and map[name] then
        url = pre .. map[name] .. ".png"
    else
        url = pre .. tostring(name) .. ".png"
	end

	self.m_giftFront:setUrlImage(url)
	self:setGiftId(giftid,mid)
end

function Seat:setGiftId(giftid,mid)
	if not self.m_data or not mid or not (mid==self.m_data.uid) then
		return
	end
	self.m_data.giftId = giftid
end

function Seat:getGiftView(giftid)
	return self.m_giftView
end

function Seat:setGiftViewVisible(isEnabled)
	if self:isEmpty() then
		isEnabled = false
	end
	self.m_giftView:setVisible(isEnabled)
end

function Seat:getPokerPos(index)
	if index == 1 then
		return self.m_seatView:convertToWorldSpace(cc.p(self.m_poker1:getPosition()))
	else
		return self.m_seatView:convertToWorldSpace(cc.p(self.m_poker2:getPosition()))
	end
end

function Seat:updatePokerPos()
	local offsetX = 10
	local offsetY = 5
	self.m_poker1:setRotation(Seat.CARD_1_ROTATION)
	self.m_poker2:setRotation(Seat.CARD_2_ROTATION)
	local posId = self:getPosId() or self.m_id
	if self:isSelf() then
		g_NodeUtils:arrangeToRightCenter(self.m_poker1, 90, -20)
		g_NodeUtils:arrangeToRightCenter(self.m_poker2, 90 + offsetX*3, -20 - offsetY)
		self.m_poker1:setScale(1)
		self.m_poker2:setScale(1)
	elseif posId < 4 then
		g_NodeUtils:arrangeToLeftCenter(self.m_poker1,  -30, -20)
		g_NodeUtils:arrangeToLeftCenter(self.m_poker2,  -30 + offsetX, -20 - offsetY)
		self.m_poker1:setScale(0.5)
		self.m_poker2:setScale(0.5)
	else
		g_NodeUtils:arrangeToRightCenter(self.m_poker1,  30, -20)
		g_NodeUtils:arrangeToRightCenter(self.m_poker2,  30 + offsetX, -20 - offsetY)
		self.m_poker1:setScale(0.5)
		self.m_poker2:setScale(0.5)
	end
end

	--	data = 
	-- ["messageType"] = 0;
    -- ["receiverUid"] = 0;
    -- ["receiverName"] = ;
    -- ["senderName"] = 啦啦啦;
    -- ["receiverTid"] = 30749;
    -- ["senderTid"] = 30749;
    -- ["message"] = All in;
    -- ["senderUid"] = 6084;

function Seat:updateChatBubble(data)
	if not self.m_nodeChatBubble  then
		self.m_nodeChatBubble = cc.Node:create()
		self.m_chatBubble:getParent():addChild(self.m_nodeChatBubble)
		self.m_nodeChatBubble:setPosition(self.m_chatBubble:getPosition())
	end

	local posId = self:getPosId()
	local label = GameString.createLabel(data.message,g_DefaultFontName,20)
	local labelSize = label:getContentSize()
	local bubbleSize = self.m_chatBubble:getContentSize()
	local height = labelSize.height+50
	if self.m_chatBubbleSchedul then
        g_Schedule:cancel(self.m_chatBubbleSchedul)
	end
	self.m_chatBubbleTimeOut = 3
	--self.m_chatBubble:setCapInsets(cc.rect(0,0,0,0))
	--[[if posId == 2 or posId == 3 then
		self.m_chatBubble:setTexture("creator/normalRoom/img/chatBubble_right.png")
		self.m_chatBubble:setCapInsets(cc.rect(8,5,23,35))
		--self.m_chatBubble:setAnchorPoint(cc.p(1,0))
		--self.m_txChatBubble:setAnchorPoint(cc.p(0,0.5))
		self.m_chatBubble:setPosition(cc.p(90,150))
		--self.m_txChatBubble:setPosition(cc.p(20,40))
	else
		self.m_chatBubble:setTexture("creator/normalRoom/img/chatBubble.png")
		self.m_chatBubble:setCapInsets(cc.rect(52,6,21,33))
		self.m_chatBubble:setAnchorPoint(cc.p(0,0))
		self.m_txChatBubble:setAnchorPoint(cc.p(0,0.5))
		self.m_chatBubble:setPosition(cc.p(15,150))
		--self.m_txChatBubble:setPosition(cc.p(20,40))
	end]]

	if labelSize.width < 220 then
		height = height - 20
		self.m_chatBubble:setContentSize(cc.size(labelSize.width + 30,height))
	else
		local count = math.floor(labelSize.width/220)
		count = count < 1 and 1 or count
		height = count*labelSize.height+50
		self.m_chatBubble:setContentSize(cc.size(250,height))

	end
	
	--缩放背景
	local nodeChat = g_NodeUtils:seekNodeByName(self.m_chatBubble, 'node_chat_bg')
	local bl = g_NodeUtils:seekNodeByName(self.m_chatBubble, 'chatBubble_l')
	local bm = g_NodeUtils:seekNodeByName(self.m_chatBubble, 'chatBubble_m')
	local br = g_NodeUtils:seekNodeByName(self.m_chatBubble, 'chatBubble_r')

	local s = self.m_chatBubble:getContentSize()
	nodeChat:setPosition(s.width/2,s.height)
	local w = (s.width-18)/2
	local h = s.height
	bl:setContentSize(cc.size(w,h))
	br:setContentSize(cc.size(w,h))
	bm:setContentSize(cc.size(18,h+6))

	self.m_txChatBubble:setPosition(15,height/2+6)

	Log.d("updateChatBubble data = ",data)
	self.m_chatBubble:setVisible(true)
	local x,y = self.m_txChatBubble:getPosition()
	Log.d("chat bubble text position = ",x,y)
	self.m_txChatBubble:setString(data.message)

	local func = function (  )
		self.m_chatBubble:setVisible(false)
	end
	self.m_chatBubble:stopAllActions()

	
	local pParent  = cc.Director:getInstance():getRunningScene()
	if pParent then
		--pParent = pParent:getParent()
		local wp = self.m_nodeChatBubble:convertToWorldSpace(cc.p(0,0))
		local tp =pParent:convertToNodeSpace(wp)
		tp.y = tp.y + 6
		self.m_chatBubble:retain()
		self.m_chatBubble:removeFromParent(false)
		pParent:addChild(self.m_chatBubble)
		self.m_chatBubble:release()
		self.m_chatBubble:setPosition(tp)
	end


	g_NodeUtils:delayCall(self.m_chatBubbleTimeOut,self.m_chatBubble,func)
	--self.m_chatBubbleSchedul = g_Schedule:schedulerOnce(function()
	--								self.m_chatBubble:setVisible(false)
	--							end,self.m_chatBubbleTimeOut)
end

function Seat:isSelf()
	if self.m_data then
		return tonumber(self.m_data.uid) == tonumber(g_AccountInfo:getId())
	end
end

function Seat:getPosId()
	return self.m_seatView.m_curPosId
end

function Seat:setPosId(id)
	self.m_seatView.m_curPosId = id
	self:updateGiftBtnPos()
	self:updatePokerPos()
end

function Seat:getSeatId()
	return self.m_id
end

function Seat:setSeatId(id)
	self.m_id = id
end

function Seat:getName()
	return self.m_data.name
end

function Seat:getUid()
	return self.m_data.uid
end

function Seat:getView()
	return self.m_seatView
end

function Seat:getCardType()
    return self.m_cardType;
end

function  Seat:setCardType(value)
    self.m_cardType = value;
end
function Seat:getExpressionContainer()
	return self.m_expressionContainer
end

function Seat:clearExpressionContainer()
    self.m_expressionContainer:removeAllChildren()
end

Seat.STATUS_COLOR = {
	[Seat.SEAT_WAIT ] = cc.c3b(0xC2,0xC7, 0xCC);
	[Seat.SEAT_READY] = cc.c3b(0xC2,0xC7, 0xCC);
	[Seat.SEAT_FOLD ] = cc.c3b(0xF0, 0x4B, 0x4C);
	[Seat.SEAT_ALLIN] = cc.c3b(0xF0, 0x4B, 0x4C);
	[Seat.SEAT_CALL ] = cc.c3b(0x55, 0xFF, 0x65);
	[Seat.SEAT_SB   ] = cc.c3b(0x55, 0xFF, 0x65);
	[Seat.SEAT_BB   ] = cc.c3b(0x55, 0xFF, 0x65);
	[Seat.SEAT_CHECK] = cc.c3b(0x55, 0xFF, 0x65);
	[Seat.SEAT_RAISE] = cc.c3b(0xFF, 0xC8, 0x41);
	[Seat.MUST_RAISE] = cc.c3b(0xFF, 0xC8, 0x41);
}

function Seat:setStatus(status)
	if tonumber(status) and tonumber(status) >= 0 then
		self.m_statusTx:setString(GameString.get("str_room_operation_type_" .. status))
		self.m_statusTx:setColor(Seat.STATUS_COLOR[tonumber(status)])
	else
		if self.m_data then
			self.m_statusTx:setString(g_StringLib.limitLength(self.m_data.name, 20, 100))
			self.m_statusTx:setColor(Seat.STATUS_COLOR[1])
			self.m_data.operationStatus = status
		end
	end
end

function Seat:isInGame()
	return self.m_data and self.m_data.m_inGame
end

function Seat:getBetChips()
	return self.m_data and self.m_data.betInChips or 0
end

function Seat:setInGame(inGame)
	if self.m_data then
		self.m_data.m_inGame = inGame
	end
end

function Seat:showInvite()
	self.m_seatView:setVisible(true)
	self.m_status = Seat.s_status.inviteFriend
	self.m_inviteFriend:setVisible(true)
	self.m_downArrow:setVisible(false)
end

function Seat:isAllIn()
	return self.m_data and self.m_data.seatChips == 0 or self.m_allIn
end

function Seat:setAllIn(isAllIn)
	self.m_allIn = isAllIn
end

function Seat:isEmpty()
	return self.m_data == nil
end

function Seat:removeData()
	self:reSet()
	self.m_data = nil
	if g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_TOURNAMENT
    or g_RoomInfo:getRoomType() == g_RoomInfo.ROOM_TYPE_KNOCKOUT then--锦标赛
		self:setVisible(false)
    end
end

function Seat:showHand(data)
	if not self:isSelf() and data.handCard1 and data.handCard2 then
		self.m_poker1:refresh()
		self.m_poker2:refresh()
		self.m_poker1:setVisible(true)
		self.m_poker2:setVisible(true)
		self.m_poker1:setCard(data.handCard1)
		self.m_poker2:setCard(data.handCard2)
		self.m_poker1:setScale(0.91)
		self.m_poker2:setScale(0.91)
		self.m_poker1:setRotation(0)
		self.m_poker2:setRotation(0)
		g_NodeUtils:arrangeToLeftCenter(self.m_poker1)
		g_NodeUtils:arrangeToRightCenter(self.m_poker2)
		self.m_poker1:showBack()
		self.m_poker2:showBack()
		self.m_poker1:flipCardStage1()
		self.m_poker2:flipCardStage1()
		g_SoundManager:playEffect(g_SoundMap.effect.ShowCard)
	else
		g_SoundManager:playEffect(g_SoundMap.effect.ShowHandCard)
	end
end

local showHandMap = {
	{x1 = 20, y1 = -150, x2 = 80, y2 = -150, rotation = 180},
	{x1 = -80, y1 = -80, x2 = -120, y2 = -20, rotation = 240},
	{x1 = -80, y1 = 60, x2 = -120, y2 = 120, rotation = 300},
	{x1 = -80, y1 = 150, x2 = -20, y2 = 150, rotation = 0},
	{x1 = -80, y1 = 150, x2 = -20, y2 = 150, rotation = 0},
	{x1 = -80, y1 = 150, x2 = -20, y2 = 150, rotation = 0},
	{x1 = 80, y1 = 120, x2 = 120, y2 = 60, rotation = -300},
	{x1 = 120, y1 = -20, x2 = 80, y2 = -80, rotation = -240},
	{x1 = -80, y1 = -150, x2 = -20, y2 = -150, rotation = 180},
}
function Seat:showHandBySelf(data)
	self.m_poker1:setCard(data.handCard1)
	self.m_poker2:setCard(data.handCard2)
	self.m_poker1:showCard()
	self.m_poker2:showCard()

	local posInfo = showHandMap[self:getPosId()]
	if self:isSelf() then
		posInfo = {x1 = -160, y1 = 150, x2 = -80, y2 = 150, rotation = 0}
	end
	self.m_poker1:setRotation(posInfo.rotation + Seat.CARD_1_ROTATION)
	self.m_poker2:setRotation(posInfo.rotation + Seat.CARD_2_ROTATION)
	
	self.m_poker1:moveBy({time = 0.2, x = posInfo.x1, y = posInfo.y1})
	self.m_poker2:moveBy({time = 0.2, x = posInfo.x2, y = posInfo.y2})
end

function Seat:showExpAnim(exp)
	if self:isSelf() then
		if not self.m_expSprite then
			local ExpSprite = require("ExpSprite")
			self.m_expSprite = ExpSprite:create()
			self.m_seatView:addChild(self.m_expSprite)
		end
		self.m_expSprite:setExp(exp)
		self.m_expSprite:setVisible(true)
		if exp > 0 then
			g_NodeUtils:arrangeToLeftCenter(self.m_expSprite, -30, -50)
			self.m_expSprite:runAction(cc.Sequence:create(
					cc.DelayTime:create(0.5),
					cc.MoveBy:create(1, cc.p(0, 100)),
					cc.CallFunc:create(function ()
						self.m_expSprite:setVisible(false)
					end)
			))
		else
			g_NodeUtils:arrangeToLeftCenter(self.m_expSprite, -30, 50)
			self.m_expSprite:runAction(cc.Sequence:create(
					cc.DelayTime:create(0.5),
					cc.MoveBy:create(1, cc.p(0, -100)),
					cc.CallFunc:create(function ()
						self.m_expSprite:setVisible(false)
					end)
			))
		end
	end
end

function Seat:showWinAnim()
	local seatFrame = cc.Sprite:create("creator/normalRoom/img/win/small-win-seat-frame.png")
	seatFrame:setContentSize(128, 176)
	self.m_seatView:addChild(seatFrame)
	g_NodeUtils:arrangeToCenter(seatFrame)
	
	local winLabel = cc.Sprite:create("creator/normalRoom/img/win/small-win-label.png")
	winLabel:setLocalZOrder(11)
	self.m_seatView:addChild(winLabel)
	g_NodeUtils:arrangeToCenter(winLabel)
	winLabel:setScale(0.5, 0.5)
	winLabel:runAction(cc.ScaleTo:create(1, 1, 1))
	winLabel:runAction(cc.MoveBy:create(1, cc.p(0, 80)))
	winLabel:runAction(cc.Sequence:create(cc.FadeTo:create(1, 0.9), cc.CallFunc:create(function ()
		winLabel:removeFromParent(true)
		seatFrame:removeFromParent(true)
	end)))
	
	if self:isSelf() then
		local table = self.m_seatView:getParent():getParent()
		local bigWinLabel = cc.Sprite:create("creator/normalRoom/img/win/large-win-label.png")
		bigWinLabel:setLocalZOrder(11)
		table:addChild(bigWinLabel)
		g_NodeUtils:arrangeToTopCenter(bigWinLabel)
		local star1 = cc.Sprite:create("creator/normalRoom/img/win/small-win-spark-star.png")
		local star2 = cc.Sprite:create("creator/normalRoom/img/win/small-win-spark-star.png")
		local star3 = cc.Sprite:create("creator/normalRoom/img/win/small-win-spark-star.png")
		bigWinLabel:addChild(star1)
		bigWinLabel:addChild(star2)
		bigWinLabel:addChild(star3)
		star1:setPosition(55, 60)
		star2:setPosition(100, 0)
		star3:setPosition(380, 80)
		
		bigWinLabel:runAction(cc.Sequence:create(
				cc.EaseBounceOut:create(cc.MoveBy:create(0.7, cc.p(0, -100))),
				cc.CallFunc:create(function ()
					bigWinLabel:removeFromParent(true)
				end)))
	end
end

function Seat:highLightHandCard(data, isGameOver)
	self.m_poker1:hideHighLight()
	self.m_poker2:hideHighLight()
	if type(data) == "table" then
		for i = 1,5 do
			if self.m_poker1:getCard() == data["card" .. i] then
				self.m_poker1:showHighLight()
			end
			if self.m_poker2:getCard() == data["card" .. i] then
				self.m_poker2:showHighLight()
			end
		end
		if isGameOver then
			if data["card1"] ~= 0 then
				if not self.m_poker1:isHighLight() then
					self.m_poker1:showFadeCard()
				end
				if not self.m_poker2:isHighLight() then
					self.m_poker2:showFadeCard()
				end
			end
		end
	end
end

function Seat:fadeHandCard()
	self.m_poker1:showFadeCard()
	self.m_poker2:showFadeCard()
end

function Seat:sharkHandCard()
	self.m_poker1:shakeCard()
	self.m_poker2:shakeCard()
	self.m_clockEffectId = g_SoundManager:playEffect(g_SoundMap.effect.Clock)
end

function Seat:stopSharkHandCard()
	self.m_poker1:stopShakeCard()
	self.m_poker2:stopShakeCard()
	if self.m_clockEffectId then
		g_SoundManager:stopEffect(self.m_clockEffectId)
		self.m_clockEffectId = nil
	end
end

function Seat:resetHandCard()
	self.m_poker1:refresh()
	self.m_poker2:refresh()
end

function Seat:dtor()
	self:stopTimer()
	self.m_seatView = nil
	self.m_data = nil
end

return Seat