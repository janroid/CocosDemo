---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MartinLai.
--- DateTime: 2018/12/12 16:13
---

local ViewCtr = import("framework.scenes").ViewCtr;
local BehaviorExtend = import("framework.behavior").BehaviorExtend;
local NormalRoomSceneCtr = class("NormalRoomSceneCtr",ViewCtr);
local DailyTaskManager = import("app.scenes.dailyTask").DailyTaskManager;
local CalculateCardType = import("app.scenes.cardCalculator").CalculateCardType:create()
local BroadCastNotify = import("app.common.customUI").BroadcastNotify
BehaviorExtend(NormalRoomSceneCtr);

local RoomSocketManager = import("app.net").RoomSocketManager
local SocketManager = RoomSocketManager:create()
local SeatManager = require("SeatManager").getInstance()
local Seat = require("Seat")
local ChipManager = require("chipManager.ChipManager")
local LoginRoomFailedHandler = require("LoginRoomFailedHandler")
local GameReviewDataManager = import("app.scenes.roomGameReview").GameReviewDataManager.getInstance()

local SuperLottoPop = import("app.scenes.superLotto").SuperLottoPop
local UserSitDownData = require("UserSitDownData")

NormalRoomSceneCtr.s_sendChipFailType =  {
	LESS_THAN_SMALLBLIND    = 0X9401; --钱数不够，不能赠送
	SEND_TOO_MANY_TIMES     = 0X9402; --赠送太频繁
}

NormalRoomSceneCtr.preOperationType = {
	preFold   = 1;
	preCheck  = 2;
	preRaise  = 3;
}

NormalRoomSceneCtr.s_handlerType = {
	SHOW_HAND_CARD_ANIM       = 2;  -- 显示手牌动画完成完回调
	SHOW_PUBLIC_CARD_ANIM_3   = 13;  -- 播放前三张牌动画完回调
	SHOW_PUBLIC_CARD_ANIM_4   = 14;  -- 第四张牌动画完回调
	SHOW_PUBLIC_CARD_ANIM_5   = 15;  -- 第五张牌动画完回调
}

---配置事件监听函数
NormalRoomSceneCtr.s_eventFuncMap =  {
	[g_SceneEvent.USERINFO_PLAY_ADD_FRIEND_ANIM]= "onPlayAddFriendAnim",
	[g_SceneEvent.USERINFOPOP_SEND_PROP_SUCC]	= "onSendPropSucc",
	[g_SceneEvent.USERINFOPOP_SEND_CHIPS_FAIL]	= "onSendChipsFail",
	[g_SceneEvent.USERINFOPOP_SEND_CHIPS_SUCC]	= "onSendChipsSucc",
	[g_SceneEvent.USERINFOPOP_SEND_PROP]	    = "requestSendProp",
	[g_SceneEvent.USERINFOPOP_SEV_ADD_FRIEND]	= "requestAddFriend",
	[g_SceneEvent.USERINFOPOP_SEND_CHIP]	    = "onSendChips",
	[g_SceneEvent.GIFT_SEV_CHANGE_GIFT]			= "requestChangeGift",
	[g_SceneEvent.GIFT_NOTIFY_GIFT_USED]	    = "onUpdateSeatGiftIcon",
	[g_SceneEvent.GIFT_SEND_GIFT]   			= "onSendGift",
	[g_SceneEvent.GIFT_SEND_GIFT_SUCC]   		= "onSendGiftSucc",
	[g_SceneEvent.ROOM_CONNECT_SUCCESS]			= "onSocketConnected",
	[g_SceneEvent.ROOM_LOGIN_SUCCESS]			= "onLoginRoomSuccess",
	[g_SceneEvent.ROOM_LOGIN_FAIL]		    	= "onLoginRoomFailed",
	[g_SceneEvent.ROOM_LOGOUT_SUCCESS]			= "onLogoutRoomSuccess",
	[g_SceneEvent.ROOM_USER_BUY_IN]		      	= "playNowSitDown",
	[g_SceneEvent.ROOM_USER_SIT_DOWN]	      	= "onUserSitDown",
	[g_SceneEvent.ROOM_USER_STAND_UP]	      	= "onUserStandUp",
	[g_SceneEvent.ROOM_GAME_START]		    	= "onGameStart",
	[g_SceneEvent.ROOM_PUBLIC_CARD_FLOP]    	= "onCardFlop",
	[g_SceneEvent.ROOM_PUBLIC_CARD_TURN]    	= "onCardTurn",
	[g_SceneEvent.ROOM_PUBLIC_CARD_RIVER]		= "onCardRiver",
	[g_SceneEvent.ROOM_TURN_TO_OPERATE]	        = "turnToOperate",
	[g_SceneEvent.ROOM_OPERATE_SUCCESS]	        = "onOperateSuccess",
	[g_SceneEvent.ROOM_POTS_INFO]	            = "onPotsInfo",
	[g_SceneEvent.ROOM_GAME_OVER_DATA]	        = "onGameOver",
	[g_SceneEvent.ROOM_CHAT_SMALLL_TRUMPET]		= "onChatSmallTrumpet",
	[g_SceneEvent.ROOM_CHAT_BIG_TRUMPET]		= "onChatBigTrumpet",
	[g_SceneEvent.DEALERPOP_SEND_CHIP]			= "onSendChipsToDealer",
	[g_SceneEvent.SUPER_LOTTO_BUY_NEXT]			= "onSuperLottoBuyNext",
	[g_SceneEvent.SUPER_LOTTO_AUTO_BUY]			= "onSuperLottoAutoBuy",
	[g_SceneEvent.SUPER_LOTTO_CANCEL_AUTO_BUY]	= "onSuperLottoCancelAutoBuy",
	[g_SceneEvent.ROOM_SHOW_HAND]	            = "showHand",
	[g_SceneEvent.SHOW_TOP_TRUMPET_TIP]			= "showTopTrumpeTip",
	[g_SceneEvent.ROOM_REQ_CARD_CALCULATE]		= "requestCalculate",
	[g_SceneEvent.ROOM_SNG_END_BACK_TO_LOBBY]   = "back",
	[g_SceneEvent.ROOM_RE_LOGIN]		        = "reLoginRoom",
	[g_SceneEvent.ROOM_AUTO_BUY_IN]		        = "autoBuyIn",
	[g_SceneEvent.ROOM_OPERATION_HANDLER]		= "__operationHandler",
	[g_SceneEvent.ROOM_CHAT_SEND_MESSAGE] 		= "sendChatMessage",
    [g_SceneEvent.ROOM_CHAT_SEND_EMOTION]       = "sendChatEmotion",
	[g_SceneEvent.ROOM_PRE_SWITCH_ROOM]	        = "preSwitchRoom",
	[g_SceneEvent.ROOM_SWITCH_ROOM]		        = "switchRoom",
	[g_SceneEvent.ROOM_POP_SCENE]		        = "popScene",
	[g_SceneEvent.GET_USER_HDDJ_NUMBER]		    = "getHddjNumber",
	[g_SceneEvent.SEND_CHIP_FUNISH] 			= "onSendChipActionFinish";
	[g_SceneEvent.EVENT_APP_PAUSE] 			    = "onAppPause";
	[g_SceneEvent.EVENT_APP_RESUME] 		    = "onAppResume";
}

function NormalRoomSceneCtr:onAppResume()
	SocketManager:openSocket(g_ProxyManager:getCurrentProxyIpPort())
end

function NormalRoomSceneCtr:onAppPause()
	if device.platform == "android" then
		SocketManager:closeSocket()
	end
end

function NormalRoomSceneCtr:ctor(view)
	ViewCtr.ctor(self)
	self.m_view = view
    self.m_gameStartData = nil
    self.m_totalWinChips = 0;    --自己赢得的总筹码
	self.m_totalBetChips = 0;
	self.m_isShowRatio = false
	self.m_isGotoMttLobby = false

    self.m_userSendChipArray = {};
    for i=1,9 do
        self.m_userSendChipArray[i] = 0;
    end
end

function NormalRoomSceneCtr:onEnter()
	ViewCtr.onEnter(self)
	g_SoundManager:pauseMusic()
	--g_SoundManager:playMusic(g_SoundMap.music.AudioGameBack)
	self.m_socketManager = SocketManager
	self.m_SeatManager = SeatManager
	SocketManager:openSocket(g_ProxyManager:getCurrentProxyIpPort())
	
	local dealerList = g_Model:getData(g_ModelCmd.DEALER_LIST)
	if dealerList == nil then
		self.m_retryTimes = 3
		local params = HttpCmd:getMethod(HttpCmd.s_cmds.DEALER_GET_INFO)
		g_HttpManager:doPost(params,self, self.onGetDealerInfoResponse, self.getDealerInfoError)
	end
	
	g_Model:watchData(g_ModelCmd.USER_SELF_SEAT_ID, self, self.selfSeatChange, false)
	g_Model:watchData(g_ModelCmd.ROOM_CALCULATOR_DATA,self, self.setRatio, false);
	g_Model:watchData(g_ModelCmd.ROOM_CARD_TYPE,      self, self.setCardType, false);
	g_Model:watchData(g_ModelCmd.ROOM_LEAVE_SEAT_DATA,self, self.showAfkView, false);
	g_Model:watchData(g_ModelCmd.ROOM_ENTER_MATCH_DATA,self, self.enterMatchRoom, false);
	g_Model:watchData(g_ModelCmd.ROOM_ENTER_HIGHT_DATA,self, self.enterHightBiggerRoom, false);--
	g_Model:watchData(g_ModelCmd.ROOM_ENTER_MTT_LOBBY,self, self.enterMttLobby, false);
    g_Model:watchData(g_ModelCmd.TRACE_FRIEND,self, self.traceFriend, false);
    g_Model:watchData(g_ModelCmd.LOTTO_BUY_FAIL, self, self.lottoBuyFailHandler, false);
    g_Model:watchData(g_ModelCmd.LOTTO_REWARD, self, self.lottoReward, false);
    g_Model:watchData(g_ModelCmd.LOTTO_BUY_SUCCEED,self, self.lottoBuySucceed, false);
	g_Model:watchData(g_ModelCmd.ROOM_SIT_FAIL_DATA, self, self.onSitDownFailed, false)
	
	g_Progress.getInstance()
				:setOverTimeCallback(self, function ()
					SocketManager:closeSocket()
					LoginRoomFailedHandler:onLoginFailed(g_RoomInfo.ERROR_LOGIN_OTHER)
				end)
	            :show(30, true)
end

function NormalRoomSceneCtr:selfSeatChange(data)
	local seatId = tonumber(data)
	if seatId and seatId > 0 then
		self.m_view:showStandUpBtn(true)
	else
		self.m_view:showStandUpBtn(false)
	end
end

function NormalRoomSceneCtr:shake()
	-- NativeEvent.getInstance():callNative(NativeCmd.KEY.KEY_SHAKE)
	cc.Device:vibrate(0.5)
end

function NormalRoomSceneCtr:back()
	if self.m_backing then return end
	self.m_backing = true
	SocketManager:logoutRoom()
	g_Progress.getInstance():show(30, true)
	self:clear()
	SeatManager:hideSeat()
	self.m_backTimeout = g_Schedule:schedulerOnce(function ()
		SocketManager:closeSocket()
		self:popScene()
		if not g_SoundManager:isMusicPlaying() then
			if g_SettingConfig.getBGMSwitch() then
				if g_SoundManager.isMusicPause then
					g_SoundManager:resumeMusic()
				else
					g_SoundManager:playMusic(g_SoundMap.music.BMG, true)
				end
			end
		end
	end,2)
end


function NormalRoomSceneCtr:popScene()
	SocketManager:closeSocket()
	g_Schedule:cancel(self.m_backTimeout)
	g_RoomInfo:reset()
	if self.m_isGotoMttLobby then
		local mttLobbyScene = import('app.scenes.mttLobbyScene').scene
		cc.Director:getInstance():replaceScene(mttLobbyScene:create());
		self.m_isGotoMttLobby = false
	else
		cc.Director:getInstance():popScene()
	end
	g_Progress.getInstance():dismiss()
end

function NormalRoomSceneCtr:onLogoutRoomSuccess()
	Log.d("NormalRoomSceneCtr:onLogoutRoomSuccess",self.m_toRoomData)
	self:clear()
	self.m_SeatManager:hideSeat()
	g_Schedule:cancel(self.m_switchTimeout)
	SocketManager:closeSocket()
	if self.m_switchRoom then
		self.m_switchRoom = false
		if self.m_toRoomData then
			self:toRoom(self.m_toRoomData)
			self.m_toRoomData = nil
		else
			self:requestRoomInfo()
		end
	else
		self:popScene()
	end
end

function NormalRoomSceneCtr:requestRoomInfo()
	g_Progress.getInstance():show(30, true)
	local param = HttpCmd:getMethod(HttpCmd.s_cmds.TABLE_QUICKIN)
	g_HttpManager:doPost(param, self, self.onQuickStartResponse)
	Log.d("requestRoomInfo", param)
end

function NormalRoomSceneCtr:toRoom(data)
	self:clearOldScene()
	if data.tableType==g_RoomInfo.ROOM_TYPE_TOURNAMENT then
		g_Model:setData(g_ModelCmd.ROOM_TOURNAMENT_DATA, data) -- 用于更新rank view 数据
	end
	if data.tableType == g_RoomInfo:getRoomType() then
		g_RoomInfo:setData(data)
		self.m_socketManager:openSocket(g_ProxyManager:getCurrentProxyIpPort())
	else
		g_RoomInfo:setData(data)
		local RoomPresenter = import("app.presenter").RoomPresenter
		RoomPresenter:replaceRoomScene(data)
	end
end

-- 能否立即换房 子类根据需求重写
function NormalRoomSceneCtr:canSwitchImmediately()
	return not SeatManager:selfInGame()
end

function NormalRoomSceneCtr:preSwitchRoom(data)
	if self:canSwitchImmediately() then
		self:switchRoom(data)
	else
		g_AlertDialog.getInstance()
		:setTitle("")
		:setContent(GameString.get("str_room_room_track_friend_tips"))
		:setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
		:setLeftBtnTx(GameString.get("str_common_confirm"))
		:setRightBtnTx(GameString.get("str_common_cancel"))
		:setCloseBtnVisible(false)
		:setLeftBtnFunc(
		function()
			self:nextStandUp(data)
		end)
		:show()
	end
end

function NormalRoomSceneCtr:switchRoom(data)
	if g_TableLib.isEmpty(data) or data.ip == nil then return end
	self.m_switchRoom = true
	self.m_toRoomData = data
	
	g_Progress.getInstance():show(30, true)
	SocketManager:logoutRoom()
	self:clear()
	SeatManager:hideSeat()
	SeatManager:setOffset(0)
	SeatManager:updateSeatPos()
	self.m_switchTimeout = g_Schedule:schedulerOnce(function ()
		self.m_switchRoom = false
		SocketManager:closeSocket()
		self:toRoom(self.m_toRoomData)
		self.m_toRoomData = nil
	end,2)
end

function NormalRoomSceneCtr:onQuickStartResponse(isSuccess, data)
	g_Progress.getInstance():dismiss()
	Log.d("NormalRoomSceneCtr:onQuickStartResponse",data)
	if not isSuccess or g_TableLib.isEmpty(data) or data.ip == nil then
		g_AlarmTips.getInstance():setText(GameString.get("str_login_network_err")):show()
		return
	end
	data.tableType = g_RoomInfo.ROOM_TYPE_NORMAL
	self:switchRoom(data)
end

function NormalRoomSceneCtr:onBack()
	if SeatManager:selfInGame() then
		self:showLossChipsDialog()
	else
		self:back()
	end
end

function NormalRoomSceneCtr:clearTimer()
	if self.m_clearTimer then
		g_Schedule:cancel(self.m_clearTimer)
		self.m_clearTimer = nil
	end
end

function NormalRoomSceneCtr:onCleanup()
	g_Model:unwatchData(g_ModelCmd.USER_SELF_SEAT_ID,   self, self.selfSeatChange)
    g_Model:unwatchData(g_ModelCmd.ROOM_CALCULATOR_DATA,self, self.setRatio);
    g_Model:unwatchData(g_ModelCmd.ROOM_CARD_TYPE,      self, self.setCardType);
    g_Model:unwatchData(g_ModelCmd.ROOM_LEAVE_SEAT_DATA,self, self.showAfkView);
    g_Model:unwatchData(g_ModelCmd.ROOM_ENTER_MATCH_DATA,self, self.enterMatchRoom);
	g_Model:unwatchData(g_ModelCmd.ROOM_ENTER_HIGHT_DATA,self, self.enterHightBiggerRoom);
	g_Model:unwatchData(g_ModelCmd.ROOM_ENTER_MTT_LOBBY,self, self.enterMttLobby);
    g_Model:unwatchData(g_ModelCmd.TRACE_FRIEND,self, self.traceFriend);
    g_Model:unwatchData(g_ModelCmd.LOTTO_BUY_SUCCEED,self, self.lottoBuySucceed);
    g_Model:unwatchData(g_ModelCmd.LOTTO_BUY_FAIL, self, self.lottoBuyFailHandler);
    g_Model:unwatchData(g_ModelCmd.LOTTO_REWARD, self, self.lottoReward);
	g_Model:unwatchData(g_ModelCmd.ROOM_SIT_FAIL_DATA, self, self.onSitDownFailed)
	
	ViewCtr.onCleanup(self)
	self:clearTimer()
	ChipManager:cleanup()
	SeatManager:cleanup()
	SocketManager:closeSocket()
	-- GameReviewDataManager:clear()
    self.m_totalWinChips = 0
	self.m_totalBetChips = 0;
	self.m_isShowRatio = false
	self.m_isGotoMttLobby = false

	--清空赠送荷官消费用户信息
    for i=1,#self.m_userSendChipArray do
        self.m_userSendChipArray[i] = 0;
    end
end

function NormalRoomSceneCtr:setRatio(data)
	local arr = g_RoomInfo:getPublicCards()
	if arr and (#arr==3 or #arr==4) and not self.m_isShowRatio and data~={} then
		return
	end
	self.m_view:updateCardCalculator(self:getMaxRatioStr(data))
end

function NormalRoomSceneCtr:setCardType(cardType)
    cardType = tonumber(cardType)
    if(cardType ~= nil) then
        local index = 12 - cardType;
        if index >= 1 and index <= 8 then
			local str = GameString.get("str_room_card_type")[index] .. ":100%"
			self.m_view:updateCardCalculator(str)
        end
    end
end

--获取最大牌率
function NormalRoomSceneCtr:getMaxRatioStr(data)

	local ret = data or g_Model:getData(g_ModelCmd.ROOM_CALCULATOR_DATA) or {}
	
    if g_TableLib.isEmpty(ret) then
        return ""
    end

    local index = 1
    for i = 2, 8 do
        if ret[i] >= ret[index] then
            index = i
        end
    end
    if ret[index]==0 then
        return ""
    end

    return GameString.get("str_room_card_type")[index] .. ":" .. ret[index] .."%"
 end

function NormalRoomSceneCtr:onSocketConnected()
	SocketManager:connectGameServer()
	SocketManager:loginRoom()
end

function NormalRoomSceneCtr:reLoginRoom()
	SocketManager:loginRoom()
end

--一些动作的回调
function NormalRoomSceneCtr:__operationHandler(type)
	
	if type==NormalRoomSceneCtr.s_handlerType.SHOW_HAND_CARD_ANIM then
		self:requestCalculate() -- 成牌概率数据

	elseif type==NormalRoomSceneCtr.s_handlerType.SHOW_PUBLIC_CARD_ANIM_3
	    or type==NormalRoomSceneCtr.s_handlerType.SHOW_PUBLIC_CARD_ANIM_4 then
		Log.d("NormalRoomSceneCtr.__operationHandler:成牌概率数据",type)
		if SeatManager:getSelfSeatId()==-1 or not SeatManager:selfInGame() then
			 return
		end
		local data =  g_Model:getData(g_ModelCmd.ROOM_CALCULATOR_DATA) or {}
		self.m_isShowRatio = true
		self:setRatio(data)
		self.m_isShowRatio = false
		CalculateCardType:calculateType(g_RoomInfo:getHandCard()[1], g_RoomInfo:getHandCard()[2], g_RoomInfo:getPublicCards());
		self:showPokerTypeTips()

	elseif type==NormalRoomSceneCtr.s_handlerType.SHOW_PUBLIC_CARD_ANIM_5 then
		-- 计算牌型
		g_Model:setData(g_ModelCmd.ROOM_CALCULATOR_DATA,{});-- 把所有牌型概率设置为0
		if SeatManager:getSelfSeatId()==-1 or not SeatManager:selfInGame() then
			 return
		end
		CalculateCardType:calculateType(g_RoomInfo:getHandCard()[1], g_RoomInfo:getHandCard()[2], g_RoomInfo:getPublicCards());
		
		g_Model:setData(g_ModelCmd.ROOM_CARD_TYPE, CalculateCardType:getCardType());
		self:showPokerTypeTips()

	end
end

function NormalRoomSceneCtr:showPokerTypeTips()
	local card = CalculateCardType:getKeyCardArray()
	local highLightCard = {}
	for i, v in ipairs(card) do
		highLightCard["card" .. i] = v
	end
	self.m_view:highlightPublicCard(highLightCard)
	SeatManager:getSelfSeat():highLightHandCard(highLightCard)
	self.m_view:showPokerTypeTips(CalculateCardType:getCardTypeName(CalculateCardType:getCardType()))
end

function NormalRoomSceneCtr:requestCalculate()
	

	if SeatManager:getSelfSeatId()==-1 or not SeatManager:selfInGame() then
		 return
	end
	
	local q1 = g_TableLib.clone(g_RoomInfo:getHandCard())
	local q2 = g_RoomInfo:getPublicCards()
	local len = #q1
	for i=1,#q2 do
		q1[len+i] = q2[i]
	end

	

	if #q1==2 or #q1==5 or #q1==6 then
		Log.d("NormalRoomSceneCtr.requestCalculate:成牌概率数据:",q1)
		local cardProbability = g_PokerManager.getInstance():getPokersProbability(q1)
		g_Model:setData(g_ModelCmd.ROOM_CALCULATOR_DATA, cardProbability);
		--g_EventDispatcher:dispatch(g_SceneEvent.SLOT_CALCULATOR, q1)
	end
end

function NormalRoomSceneCtr:onLoginRoomFailed(code)
	LoginRoomFailedHandler:onLoginFailed(code)
end

function NormalRoomSceneCtr:onLoginRoomSuccess()
	g_Progress.getInstance():dismiss()
	local roomInfo = g_RoomInfo
	self:clearTimer()
	self:clear() 
	SeatManager:onLoginRoomSuccess(roomInfo)
	ChipManager:onLoginRoomSuccess(roomInfo)
	self.m_view:setInfo()
	self.m_view:updatePublicCard(roomInfo:getPublicCards())
	self.m_view:updateOperation(roomInfo)
	self.m_view:updatePreOperation(roomInfo)
	self.m_view:resetPreOperation()
	self.m_view:updateTreasureBoxView() -- 宝箱
	
	local betId = roomInfo:getBetInSeatId()
	self.m_view:lightTo(betId, 0)
	if betId > 0 then
		SeatManager:getSeat(betId):startTimer(roomInfo:getBetInExpire())
	end
	if not SeatManager:selfInSeat() then
		self:autoSitDown()
	end
	if g_SettingConfig:getAutoBuyInSwitch() then
		self:autoBuyIn()
	end

	self:updateView(g_SceneEvent.ROOM_INIT_VIEW)
	g_EventDispatcher:dispatch(g_SceneEvent.ROOM_REQ_CARD_CALCULATE) -- req成牌概率
	
	local inviteData = g_Model:getData(g_ModelCmd.RECEIVE_INVITE_DATA)
	if not g_TableLib.isEmpty(inviteData) and inviteData.name then
		local str = string.format(GameString.get("str_receive_invite_tips"), inviteData.name)
		g_AlarmTips.getInstance():setText(str):show()
		g_Model:clearData(g_ModelCmd.RECEIVE_INVITE_DATA)
	end
end

function NormalRoomSceneCtr:autoBuyIn()
	SocketManager:autoBuyIn()
end

function NormalRoomSceneCtr:autoSitDown()
	if  g_SettingConfig.getAutoSitSwitch() and (not g_RoomInfo:isMatch()) and g_RoomInfo:getAutoSitDown() == true then
		self:playNowSitDown()
	end
end

function NormalRoomSceneCtr:playNowSitDown(data)
	data = data or {}
	local userData = g_AccountInfo
	local id = SeatManager:getEmptySeatId()
	if id ~= -1 then
		local money = userData:getMoney()
		local bankMoney = userData:getBankMoney()
		
		Log.d("playNowSitDown",money, "-----",g_RoomInfo:getMinBuyIn())
		if money >= g_RoomInfo:getMinBuyIn() then--请求买入
			data.seatId = data.seatId or id
			data.buyinChips = data.buyinChips
			self:buyIn(data)
		elseif bankMoney > 0 then
			g_AlertDialog.getInstance()
			             :setTitle(GameString.get("tips"))
			             :setContent(GameString.get("str_room_useer_game_in_current_chip_shortstage"))
			             :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
			             :setLeftBtnTx(GameString.get("str_friend_go_to_store"))
			             :setRightBtnTx(GameString.get("str_room_chip_shortstage_go_bank"))
			             :setLeftBtnFunc(
					function ()
						g_PopupManager:show(g_PopupConfig.S_POPID.POP_STORE)
					end)
			             :setRightBtnFunc(
					function ()
						if g_AccountInfo:getIsSetBankPassword() then
							g_PopupManager:show(g_PopupConfig.S_POPID.SAFE_BOX_PASSWORD_POP)
						else
							g_PopupManager:show(g_PopupConfig.S_POPID.SAFE_BOX_POP)
						end
					end)
			             :show()
		else
			--买入筹码不够，弹框提示用户资产不足，购买筹码或者换桌
			g_AlertDialog.getInstance()
			             :setTitle(GameString.get("tips"))
			             :setContent(GameString.get("str_room_not_enough_money"))
			             :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
			             :setLeftBtnTx(GameString.get("str_room_switch_table"))
			             :setRightBtnTx(GameString.get("str_room_buy_chips"))
			             :setLeftBtnFunc(self.requestRoomInfo, self)
			             :setRightBtnFunc(
					function ()
						g_PopupManager:show(g_PopupConfig.S_POPID.POP_STORE)
					end)
			             :show()
		end
	end
end

function NormalRoomSceneCtr:buyIn(data)
	data.buyinChips = data.buyinChips or SeatManager:getDefaultBuyInChips()
	SocketManager:requestBuyIn(data)
end 

function NormalRoomSceneCtr:onStandClick()
	if SeatManager:selfInSeat() then
		if SeatManager:selfInGame() then
			self:showLossChipsDialog(self.standUp, self)
		else
			self:standUp()
		end
	else
		g_Progress.getInstance():show(30, true)
		self.m_switchRoom = true
		SocketManager:logoutRoom()
		self.m_switchTimeout = g_Schedule:schedulerOnce(function ()
			self.m_switchRoom = false
			SocketManager:closeSocket()
			self:requestRoomInfo()
		end,2)
	end
end

function NormalRoomSceneCtr:showLossChipsDialog(func, obj)
	g_AlertDialog.getInstance():setTitle(GameString.get("tips"))
	             :setContent(GameString.get("str_room_leave_table_confirm"))
	             :setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
	             :setLeftBtnTx(GameString.get("cancel"))
	             :setRightBtnTx(GameString.get("confirm_btn"))
	             :setRightBtnFunc(func or self.back, obj or self)
	             :show()
end

function NormalRoomSceneCtr:standUp()
	SocketManager:requestStandUp()
end

function NormalRoomSceneCtr:onSendGift(data)
	local param = {}
    param.giftId = data.giftId;
    param.sendSeatId = SeatManager:getSelfSeatId() or 0;
    local arrLength = #data.userIds
    param.userArr = {};
    for i = 1, arrLength do
        param.userArr[i] = {}
        param.userArr[i].seatId = data.seatIds[i]
        param.userArr[i].seatUid =data.userIds[i]
    end
	SocketManager:requestSendGift(param)
end

function NormalRoomSceneCtr:onSendGiftSucc(data)
    if data == nil or g_TableLib.isEmpty(data) then return end

    if data.sendSeatId ~= nil and data.sendSeatId==SeatManager:getSelfSeatId() then -- and not TutorialKit.isTutorial() 新手教程屏蔽
        -- DailyTaskManager.getInstance():reportSendTableGifts(); --上报
    end
    
    local userSeat = nil;
    for i=1,#data.userArr do
        --座位未更换玩家的情况下
        userSeat = SeatManager:getSeat(data.userArr[i].seatId):getSeatData()
        if userSeat ~= nil and not g_TableLib.isEmpty(userSeat) then
            if (userSeat.uid == data.userArr[i].seatUid) then
				local param = {}
				param.giftId = data.giftId
				param.mid = data.userArr[i].seatUid
				param.seatId = data.userArr[i].seatId
				param.sendSeatId = data.sendSeatId
				SeatManager:onUpdateSeatGiftIcon(param)
				self.m_view:playSendGiftAnim(param)
            end
			if(tostring(data.userArr[i].seatUid) == tostring(g_AccountInfo:getId())) then --当前用户收到礼物，播放语音
				if tostring(userSeat.uid) ==  tostring(g_AccountInfo:getId()) then
					g_AccountInfo:setUserUseGiftId(data.giftId)
				end
				
				g_SoundManager:playEffect(g_SoundMap.effect.RECEIVE_GIFT_FROM_USER)
            end
        end
    end
end

function NormalRoomSceneCtr:onSendChips(data)
	SocketManager:requestSendChips(data)
end

function NormalRoomSceneCtr:onSendChipsToDealer()
	SocketManager:requestSendChipsToDealer()
end

function NormalRoomSceneCtr:requestAddFriend(data)
	SocketManager:requestAddFriend(data)
end

function NormalRoomSceneCtr:onUpdateSeatGiftIcon(data)
	SeatManager:onUpdateSeatGiftIcon(data)
end

function NormalRoomSceneCtr:requestChangeGift(data)
	SocketManager:requestChangeGift(data)
end

function NormalRoomSceneCtr:requestSendProp(data)
	--请求php扣除并广播
	local param = HttpCmd:getMethod(HttpCmd.s_cmds.USER_SENDPROPS)
	param.hddjId = data.hddjId
	param.selfSeatId = data.sendSeatId 
	param.receiverSeatId = data.receiveSeatId 
	g_HttpManager:doPost(param, self,function(self,isSuccess,ret,param) end);
end
        
function NormalRoomSceneCtr:getHddjNumber()
	
	local param = HttpCmd:getMethod(HttpCmd.s_cmds.GET_USER_ROPS_NUM)
	g_HttpManager:doPost(param, self,function(self,isSuccess,data,param) 
		if data then
			local hddjNumber = tonumber(data);
			g_Model:setData(g_ModelCmd.USER_HDDJ_NUMBER, hddjNumber);
		end
	end);
end

--赠送道具成功
function NormalRoomSceneCtr:onSendPropSucc(data)
	self.m_view:startHddj(data)
end

--添加好友动画
function NormalRoomSceneCtr:onPlayAddFriendAnim(data)
	self.m_view:playAddFriendAnim(data)
end

--赠送筹码失败
function NormalRoomSceneCtr:onSendChipsFail(data)
	local str = GameString.get("str_room_not_enough_chips_to_send")
	-- if (data == NormalRoomSceneCtr.s_sendChipFailType.SEND_TOO_MANY_TIMES) then
	if (data == -27646) then
		str = GameString.get("str_room_send_chips_too_many_times")
    end
    g_AlarmTips.getInstance():setText(str):show()
end
function NormalRoomSceneCtr:onSendChipsSucc(data)
	Log.d('onSendChipsSucc---------',data)
	--如果是送给玩家，修改发送者座位筹码数；如果是送给荷官修改用户资产
	local sendSeat = SeatManager:getSeat(data.senderSeatId)
    if data.recieverSeatId <= 9 then
        sendSeat:setSeatChips(sendSeat:getSeatData().seatChips - data.sendChips);
        if data.recieverSeatId == SeatManager:getSelfSeatId() then
            --用户收到筹码，播放声音
			g_SoundManager:playEffect(g_SoundMap.effect.RECEIVE_CHIPS_FROM_USER)
        end
    else
        if data.senderSeatId==SeatManager:getSelfSeatId() then
			g_AccountInfo:setMoney(data.totalChips)
        end
        sendSeat:getSeatData().totalChips = data.totalChips
	end
	self.m_view:playSendChipsAnim(data)
end

function NormalRoomSceneCtr:fold()
	SocketManager:requestOperation({operationType = SocketManager.operationType.FOLD, betMoney = 0})
end

function NormalRoomSceneCtr:check()
	local money = g_RoomInfo:getCallNeedChips() or 0
	if money > 0 then
		self:raise(money)
	else
		SocketManager:requestOperation({operationType = SocketManager.operationType.CHECK, betMoney = 0})
	end
end

function NormalRoomSceneCtr:raise(money)
	Log.d("NormalRoomSceneCtr:raise", money,g_RoomInfo:getMaxRaiseChips(),g_RoomInfo:getUserChips())
	if money >= math.min(g_RoomInfo:getMaxRaiseChips(), g_RoomInfo:getUserChips()) then
		SeatManager:getSelfSeat():setAllIn(true)
	end
	SocketManager:requestOperation({operationType = SocketManager.operationType.CALL, betMoney = money or g_RoomInfo:getMinRaiseChips()})
end

function NormalRoomSceneCtr:allIn()
	local money = g_RoomInfo:getUserChips()
	self:raise(money)
end

function NormalRoomSceneCtr:raise3X()
	local money = g_RoomInfo:getCallNeedChips() * 3
	self:raise(money)
end

function NormalRoomSceneCtr:raiseHalfPool()
	local money = ChipManager:getPool() * 0.5
	self:raise(money)
end

function NormalRoomSceneCtr:raise75Pool()
	local money = ChipManager:getPool() * 0.75
	self:raise(money)
end

function NormalRoomSceneCtr:onUserSitDown(user)
	local playerList = g_RoomInfo:getPlayerList()
	playerList[user.seatId] = user
	SeatManager:addUser(user)
	if tonumber(user.uid) == tonumber(g_AccountInfo:getId()) then
		self.m_view:playSitDownAnim(user)
		g_Model:setData(g_ModelCmd.USER_SELF_SEAT_ID,user.seatId)
		g_AlarmTips.getInstance():setText(GameString.get("str_room_wait_next_round")):show()
	end
	
	if SeatManager:selfInSeat() then
		SeatManager:hideEmptySeat()
		SeatManager:showInviteSeat()
	end
	Log.d("NormalRoomSceneCtr:onUserSitDown:uid", user.uid, "seatId:", user.seatId)
end

function NormalRoomSceneCtr:onSitDownFailed(code)
	if code ~= nil then
		local codeStr = string.gsub(string.format("0x%02x",code), "f", "")
		code = tonumber(codeStr, 16) or code
		--坐下失败原因
		local sitDownFailMap =
		{
			[UserSitDownData.ERROR_SIT_CHIP_NOT_ENOUGH] = GameString.get("str_room_not_enough_chips");--筹码不足
			[UserSitDownData.ERROR_SIT_IP_EQUAL]        = GameString.get("str_room_sit_ip_equal");--同一ip不能坐下
			[UserSitDownData.ERROR_SIT_BUYING]          = GameString.get("str_room_not_enough_chips");--买入筹码不够
			[UserSitDownData.ERROR_SIT_IS_HAVE_USER]    = GameString.get("str_room_error_seat");--该座位已经有人坐下
			[UserSitDownData.ERROR_SIT_MONEY_TOO_BIG]   = GameString.get("str_room_too_much_chips");--筹码太多不能在本房间进行游戏
		}
		local str = sitDownFailMap[code];
		if code == UserSitDownData.ERROR_SIT_IS_HAVE_USER then
			self:playNowSitDown()
			return
		end
		if(str == nil) then
			str = GameString.get("str_room_sit_fail");
			Log.d("NormalRoomScene", "sitDownFail,data=" .. string.format("0x%02x",code), code);
			if(_DEBUG) then
				str = str .. " code:" .. tostring(code);
			end
		end
		g_AlarmTips.getInstance():setText(str):show()
	end
end

function NormalRoomSceneCtr:onUserStandUp(user)
	local playerList = g_RoomInfo:getPlayerList()
	local seatId = user.seatId
	user = playerList[seatId]
	playerList[seatId] = nil
	SeatManager:removeUser(seatId)
	
	if user and tonumber(user.uid) == tonumber(g_AccountInfo:getId()) then
		g_Model:setData(g_ModelCmd.USER_SELF_SEAT_ID,-1)
		SeatManager:showUserSeat()
		g_Model:setData(g_ModelCmd.ROOM_CALCULATOR_DATA,{});
		g_Model:setData(g_ModelCmd.ROOM_CARD_TYPE,nil);
		self.m_view:stopAfkInterval()
		self.m_view:hideSelfSeatArrow()
		self.m_view:hideOperation()
		self.m_view:hidePreOperation()
	end
	
	if SeatManager:selfInSeat() then
		SeatManager:hideEmptySeat()
		SeatManager:showInviteSeat()
	end
end

function NormalRoomSceneCtr:onGameStart(data)
	for i = 1,9 do
		SeatManager:getSeat(i):onGameStart()
	end
	self:clearTimer()
	self:clear()
    self.m_gameStartData = data
	self.m_view:moveBanker()
	self.m_view:resetPreOperation()
	GameReviewDataManager:gameStartDataDeal(data)
	g_Model:setData(g_ModelCmd.LOTTO_IS_NEXT_BUY, false);
	g_RoomInfo:setAllBet(0)
end

function NormalRoomSceneCtr:onCardFlop(data)
	self.m_view:onCardFlop(data)
	GameReviewDataManager:cardHandleDataDeal(3, data)
end

function NormalRoomSceneCtr:onCardTurn(data)
	self.m_view:onCardTurn(data)
	GameReviewDataManager:cardHandleDataDeal(4, data)
end

function NormalRoomSceneCtr:onCardRiver(data)
	self.m_view:onCardRiver(data)
	CalculateCardType:calculateType(g_RoomInfo:getHandCard()[1], g_RoomInfo:getHandCard()[2], g_RoomInfo:getPublicCards());
	CalculateCardType:setBestPoker();
	GameReviewDataManager:cardHandleDataDeal(5, data)
end

function NormalRoomSceneCtr:turnToOperate(data)
	local betInSeatId = data:getBetInSeatId()
	self.m_view:lightTo(betInSeatId)
	self.m_view:updateOperation(data)
	self.m_view:updatePreOperation(data)
	local userSeat = SeatManager:getSeat(betInSeatId)
	userSeat:setStatus(-1)
	userSeat:startTimer(g_RoomInfo:getBetInExpire())
	
	if userSeat:isSelf() then
		self:handlePreOperate()
	end
end

function NormalRoomSceneCtr:handlePreOperate()
	local type = self.m_view:getPreOperationType()
	local callNeedChips = g_RoomInfo:getCallNeedChips()
	Log.d("NormalRoomSceneCtr:handlePreOperate", type, callNeedChips)
	if type == NormalRoomSceneCtr.preOperationType.preFold then
		if callNeedChips > 0 then
			self:fold()
		else
			self:check()
		end
	elseif type == NormalRoomSceneCtr.preOperationType.preCheck then
		if callNeedChips > 0 then
			self:raise(callNeedChips)
		else
			self:check()
		end
	elseif type == NormalRoomSceneCtr.preOperationType.preRaise then
		self:raise(callNeedChips)
	end
	self.m_view:resetPreOperation()
end

function NormalRoomSceneCtr:onOperateSuccess(data)
	local userSeat = SeatManager:getSeat(data.seatId);
	userSeat:stopTimer()
	local operationStatus = data.operationStatus;
	self:__operationTypeHandle(operationStatus,userSeat,data);
	GameReviewDataManager:operationResultDataDeal(data)
	Log.d("NormalRoomSceneCtr:onOperateSuccess", operationStatus)
end

function NormalRoomSceneCtr:__operationTypeHandle(operationType, userSeat, data)
	--小盲，标致新一轮开始（小盲和大盲all in时，server发小盲和大盲包）

	userSeat:setStatus(operationType)
	local operateChips = data.betInChips - data.lastBetChips
	userSeat:setSeatChips(userSeat:getSeatData().seatChips - operateChips);   --更新座位筹码
	if operationType == Seat.SEAT_SB then
		self.m_view:dealCard(data.seatId)                                        --确定小盲位置，从小盲处开始发牌
		g_SoundManager:playEffect(g_SoundMap.effect.DealUserCard)
		
		--大盲
	elseif operationType == Seat.SEAT_BB then

	elseif operationType ==  Seat.SEAT_CHECK then

		--弃牌
	elseif operationType == Seat.SEAT_FOLD then
		--SoundManager.playSound(kSoundFold);
		userSeat:foldCard()
		if userSeat:isSelf() then
			g_Model:setData(g_ModelCmd.ROOM_CALCULATOR_DATA,{});
			g_Model:setData(g_ModelCmd.ROOM_CARD_TYPE,nil);
		end
	elseif operationType == Seat.SEAT_CALL then		--跟注
		if userSeat:isSelf() then
		end
	elseif operationType == Seat.SEAT_RAISE then		--加注
	elseif operationType == Seat.SEAT_ALLIN then		--All In
		userSeat:setSeatChips(0)
	elseif operationType == Seat.MUST_RAISE then
		userSeat:getSeatData().ante = 0;
		ChipManager:popAnteChip(operateChips, data.betInChips, userSeat);      --筹码动画
		ChipManager:modifyBet(userSeat:getPosId(), data.betInChips);
	end
	
	if operateChips > 0 and operationType ~= Seat.MUST_RAISE then
		ChipManager:popChip(operateChips, data.betInChips, userSeat);      --筹码动画
	end
	self.m_view:onOperation(operationType)
	
	local soundMap = {
		[Seat.SEAT_CALL] = g_SoundMap.effect.Call;
		[Seat.SEAT_CHECK] = g_SoundMap.effect.Check;
		[Seat.SEAT_FOLD] = g_SoundMap.effect.Fold;
		[Seat.SEAT_RAISE] = g_SoundMap.effect.Raise;
	}
	g_SoundManager:playEffect(soundMap[operationType])
	
	if operateChips > 0 and userSeat:isSelf() then
		g_RoomInfo:setAllBet(g_RoomInfo:getAllBet() + operateChips)
	end
end

function NormalRoomSceneCtr:onPotsInfo(data)
	Log.d("NormalRoomSceneCtr:onPotsInfo", data)
	ChipManager:gatherPrizePool(data)
	self:resetSeatStatus()
end

function NormalRoomSceneCtr:resetSeatStatus()
	for i = 1, 9 do
		local seat = SeatManager:getSeat(i)
		if seat:isInGame() and seat.m_data.seatChips ~= 0 then
			seat:setStatus(-1)
		end
	end
end

function NormalRoomSceneCtr:onGameOver(data)
	-- Log.d("NormalRoomSceneCtr:onGameOver", data)
	self.m_view:lightTo(0)
	self.m_view:hideOperation()
	self.m_view:hidePreOperation()
--	self.m_view:stopAfkInterval()
	g_RoomInfo:setPublicCards({})
    self.m_gameOverData = data;
	--延迟上报游戏结束
--    param.tableId, 
--    param.roomType, 
--    param.tableLevel, 
--    param.roundCount, 
--    param.winChip
    if self.m_gameStartData ~= nil then
        local params = {}
        params.tableId = g_RoomInfo:getTid()
        params.roomType = g_RoomInfo:getRoomType()
        params.tableLevel = g_RoomInfo.getTableLevel()
        params.roundCount = self.m_gameStartData.roundCount or 0
--        params.winChip = self.m_totalWinChip - self.m_totalBetChips
        params.winChip = 0  ---赢得筹码数量未计算
	    if SeatManager:selfInGame() then       
			data.duration = data.chipsPotsCount * ChipManager.SPLIT_POTS_DURATION  + 2
			
			local potsInfo = data.chipsPotsInfo;
			local selfId = tonumber(g_AccountInfo:getId()) 
			for i,potInfo in pairs(potsInfo) do
				for _,winnerInfo in pairs(potInfo.winner) do
					if tonumber(winnerInfo.uid) ==selfId then
						params.winChip = potInfo.perMoney
						break
					end
				end
			end

		    DailyTaskManager.getInstance():reportGameOverByParam(params)
	    end
    end

	local isAllInOver = g_Model:getData(g_ModelCmd.ROOM_ALL_IN_DATA)
	
	if isAllInOver then
		self:showAllHandCard(data)
	end
	self:splitPrizePool(data)
	self:handleShowHandBtn(data,isAllInOver)

	self.m_clearTimer = g_Schedule:schedulerOnce(function()
		self:clear()
		self.m_clearTimer = nil
	end,data.chipsPotsCount * ChipManager.SPLIT_POTS_DURATION + (isAllInOver and 8 or 3))
	
	for i = 1,9 do
		SeatManager:getSeat(i):setInGame(false)
	end
	local seat = SeatManager:getSeat(g_RoomInfo:getBetInSeatId())
	if seat then
		seat:stopTimer()
	end
	
	GameReviewDataManager:GameOverDataDeal(data)
end

function NormalRoomSceneCtr:hidePokerTypeTips()
	self.m_view:resetPublicCard()
	local selfSeat = SeatManager:getSelfSeat()
	if selfSeat then
		selfSeat:resetHandCard()
	end
	self.m_view:hidePokerTypeTips()
end

function NormalRoomSceneCtr:handleShowHandBtn(data,isAllInOver)
	if not SeatManager:selfInSeat() then return end
	
	local show = false
	if not isAllInOver then
		local foldCardOver = data.chipsPotsInfo[1].winner[1].cardType < 1
		local selfWin = false
		local selfSeat = SeatManager:getSeat(SeatManager:getSelfSeatId())
		local selfFold
		if selfSeat then
			selfFold = not selfSeat:isInGame()
		end
		for _,uid in pairs(data.winners) do
			if tonumber(uid) == tonumber(g_AccountInfo:getId()) then
				selfWin = true
				break
			end
		end
		show = foldCardOver and selfWin or (not selfFold and not selfWin)
	end
	self.m_view:setBtnShowHandVisible(show)
end

function NormalRoomSceneCtr:showAllHandCard(data)
	for _,player in pairs(data.playerList) do
		local userSeat = SeatManager:getSeat(player.seatId)
		userSeat:showHand(player)
	end
end

function NormalRoomSceneCtr:playExpAnim(data)
	if data and data.expChange then
		for i, exp in pairs(data.expChange) do
			if exp ~= 0 then
				local userSeat = SeatManager:getSeat(i)
				userSeat:showExpAnim(exp)
			end
		end
	end
end

function NormalRoomSceneCtr:splitPrizePool(data)
	local potsInfo = data.chipsPotsInfo;
	local called = false
	for i,potInfo in pairs(potsInfo) do
		for _,winnerInfo in pairs(potInfo.winner) do
			local userSeat = SeatManager:getSeat(winnerInfo.seatId)
			userSeat:showHand(winnerInfo)
		end
		ChipManager:splitAnimation(i, potInfo, function (winnerInfo)
			local userSeat = SeatManager:getSeat(winnerInfo.seatId)
			userSeat:showWinAnim()
			userSeat:highLightHandCard(winnerInfo, true)
			local foldCardOver = data.chipsPotsInfo[1].winner[1].cardType < 1
			if foldCardOver then
				self.m_view:fadePublicCard()
			else
				self.m_view:highlightPublicCard(winnerInfo, true)
			end
			self.m_view:showCardType(winnerInfo.cardType)
			if userSeat:isSelf() and tonumber(winnerInfo.cardType) and tonumber(winnerInfo.cardType) >= 9 then
				g_SoundManager:playEffect(g_SoundMap.effect.YouWin)
			end
			if not called then
				self:playExpAnim(data)
				called = true
			end
		end)
	end
end

function NormalRoomSceneCtr:clear()
	ChipManager:clear()
	SeatManager:clear()
	self.m_view:hidePublicCard()
	self.m_view:hideOperation()
	self.m_view:hidePreOperation()
	self.m_view:resetPublicCard()
	self.m_view:hideCardType()
	self.m_view:setBtnShowHandVisible(false)
	self.m_view:clearTimer()
	self.m_view:hideSelfSeatArrow()
	self.m_view:lightTo(0)
	self:hidePokerTypeTips()
	g_Model:setData(g_ModelCmd.ROOM_CALCULATOR_DATA,{});
	g_Model:setData(g_ModelCmd.ROOM_CARD_TYPE,nil);
	g_Model:setData(g_ModelCmd.ROOM_ALL_IN_DATA, false)
end

function NormalRoomSceneCtr:clearOldScene()
end

function NormalRoomSceneCtr:onChatSmallTrumpet(data)
	local params = HttpCmd:getMethod(HttpCmd.s_cmds.ROOM_CHAT_TRUMPET)
	params.type = g_SocketCmd.TrumpetSocketCMD.LB_SVR_TYPE_SMALL_LABA
	params.content = data
    g_HttpManager:doPost(params, self, self.onSendTrumpetMessageSuccess)
end

function NormalRoomSceneCtr:onChatBigTrumpet(data)
	local params = HttpCmd:getMethod(HttpCmd.s_cmds.ROOM_CHAT_TRUMPET)
	params.type = g_SocketCmd.TrumpetSocketCMD.LB_SVR_TYPE_BIG_LABA
	params.content = data
    g_HttpManager:doPost(params, self, self.onSendTrumpetMessageSuccess)
end

function NormalRoomSceneCtr:onSendTrumpetMessageSuccess(isSuccess,data)
	if not isSuccess then
		Log.d("send trumpet message failed!")
		return 
	end
	local ret = data.ret
	if ret == -3 then
		self:showTips(GameString.get("str_room_chat_trumpet_not_enough"))
	elseif ret == -1 then
		--错误日志上报 网络异常
	else
		--任务系统上报
		g_EventDispatcher:dispatch(g_SceneEvent.ROOM_CHAT_SMALLL_TRUMPET_SUCCESS)
		
	end
end

function NormalRoomSceneCtr:showTips(str)
	g_AlarmTips.getInstance():setText(str):show()
end

function NormalRoomSceneCtr:onGetDealerInfoResponse(isSuccess, result)
    if isSuccess == true and result then
    	self.m_retryTimes = 3
        g_Model:setData(g_ModelCmd.DEALER_LIST, result)
    elseif (self.m_retryTimes >= 0) then
        self:getDealerInfoError();
    end
end

function NormalRoomSceneCtr:getDealerInfoError()
    if self.m_retryTimes > 0 then
		local params = HttpCmd:getMethod(HttpCmd.s_cmds.DEALER_GET_INFO)
	    g_HttpManager:doPost(params, self, self.onGetDealerInfoResponse, self.getDealerInfoError);
        self.m_retryTimes = self.m_retryTimes - 1;
    else
    	g_toast.createToast(GameString.get('str_login_bad_network'))
    end
end

--在游戏中接受好友邀请
function NormalRoomSceneCtr:nextStandUp(data)
	if g_TableLib.isEmpty(data) or data.ip == nil then return end
	self.m_toRoomData = data
    SocketManager:requestNextStandup();
end

function NormalRoomSceneCtr:onSuperLottoBuyNext()
	SocketManager:requestSuperLottoBuyNext()
end

function NormalRoomSceneCtr:onSuperLottoAutoBuy()
	SocketManager:requestSuperLottoAutoBuy()
end

function NormalRoomSceneCtr:onSuperLottoCancelAutoBuy()
	SocketManager:requestSuperLottoCancelAutoBuy()
end

function NormalRoomSceneCtr:requestShowHand()
	SocketManager:requestShowHandCard()
end

function NormalRoomSceneCtr:showHand(data)
	local seat = SeatManager:getSeat(data.seatId)
	if seat and not seat:isInGame() then
		seat:showHandBySelf(data)
		--seat:showHand(data)
	end
end

--暂离
function NormalRoomSceneCtr:showAfkView(data)
	if SeatManager:getSeat(data.seatId):isSelf() then
		self.m_view:startAfkInterval(data)
	end
end

function NormalRoomSceneCtr:requestBackSeat()
    SocketManager:requestBackSeat();
end

-- 进入 mtt大厅
function NormalRoomSceneCtr:enterMttLobby()

	--在房间 未玩牌
	if not SeatManager:selfInGame() then
		self.m_isGotoMttLobby = true
		self:back()
		return
	end
	local msg = GameString.get("str_common_enter_mtt_lobby_while_playing")
	--房间玩牌
	g_AlertDialog.getInstance()
				:setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.ONE_BUTTON)
				:setContent(msg)
				:setTitle("")
				:setCenterBtnTx(GameString.get("str_common_confirm"))
				:setCenterBtnFunc(function()
					self:nextStandUp({isToMMttLobby=true});
				end)
				:show()
end

-- mtt 积分不够 下一局自动站起 进入高级房玩牌
function NormalRoomSceneCtr:enterHightBiggerRoom(data)
	
	if g_TableLib.isEmpty(data) then
		return
	end
	self.m_enterMatchRoomData = data

	--已经在高级场
	if g_RoomInfo:getTableLevel()==g_RoomInfo.ROOM_LEVEL_SENIOR then
		g_AlarmTips.getInstance():setText(GameString.get("str_hall_tournament_apply_not_enough_score2")):show()
		return
	end

	--在房间 未玩牌
	if not SeatManager:selfInGame() then
		self:preSwitchRoom(self.m_enterMatchRoomData)
		return
	end

	--其他房间玩牌
	local msg = GameString.get("str_common_enter_match_room_tip2_while_playing2")
    g_AlertDialog.getInstance()
				:setTitle("")
				:setContent(msg)
				:setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
				:setLeftBtnTx(GameString.get("str_common_confirm"))
				:setRightBtnTx(GameString.get("str_common_cancel"))
				:setCloseBtnVisible(false)
				:setLeftBtnFunc(
					function()
						self:nextStandUp(self.m_enterMatchRoomData)
					end)
				:show()
end

-- 下一局自动站起 同时收到追踪好友的命令字
function NormalRoomSceneCtr:enterMatchRoom(data)
	
	if g_TableLib.isEmpty(data) then
		return
	end
	self.m_enterMatchRoomData = data

	if not SeatManager:selfInGame() then
		self:preSwitchRoom(self.m_enterMatchRoomData)
		return
	end

    local time = data.time - os.time();
    if(time < 0) then
        time = 0;
	end
	local msg = g_StringLib.substitute(GameString.get("str_common_enter_match_room_tip2_while_playing"), time)
    g_AlertDialog.getInstance()
				:setTitle("")
				:setContent(msg)
				:setShowBtnsIndex(g_AlertDialog.S_BUTTON_TYPE.TWO_BUTTON)
				:setLeftBtnTx(GameString.get("str_common_confirm"))
				:setRightBtnTx(GameString.get("str_common_cancel"))
				:setCloseBtnVisible(false)
				:setLeftBtnFunc(
					function()
						self:nextStandUp(self.m_enterMatchRoomData)
					end)
				:show()
end

function NormalRoomSceneCtr:sendChatMessage(data)
	SocketManager:requestSendMessage(data)
end

function NormalRoomSceneCtr:sendChatEmotion(data)
    SocketManager:requestSendEmotion(data)
end

function NormalRoomSceneCtr:traceFriend(uid)
	
	if tostring(uid) == tostring(g_AccountInfo:getId()) then
		if self.m_toRoomData and self.m_toRoomData.isToMMttLobby then -- 是否为跳转mtt lobby
			self.m_isGotoMttLobby = true
			self.m_toRoomData = nil
			self:back()
		end
		self:preSwitchRoom(self.m_toRoomData)
	end
end


function NormalRoomSceneCtr:showTopTrumpeTip(data)

end

function NormalRoomSceneCtr:lottoBuySucceed(value)
    if value then
    	local selfSeatId = SeatManager:getSelfSeatId()
    	if selfSeatId ~= -1 and selfSeatId == value.seatId then
    		g_toast.createToast(GameString.get('str_superLotto_buy_next_success'))
    	end
    	local seat = SeatManager:getSeat(value.seatId);
        if not seat:isEmpty() then
            seat:setSeatChips(value.money);
        end
    end
end

function NormalRoomSceneCtr:lottoBuyFailHandler(value)
    local code = tonumber(value);
    if code ==  SuperLottoPop.ERROR_CODE_MOENY_NOT_ENOUGH then
        g_toast.createToast(GameString.get('str_superLotto_money_not_enough'))
    elseif code == SuperLottoPop.ERROR_CODE_NOT_IN_SEAT then
        g_toast.createToast(GameString.get('str_superLotto_not_in_seat'))
    elseif code == SuperLottoPop.ERROR_CODE_SYSTEM_ERROR then

    elseif code == SuperLottoPop.ERROR_LOTTERY_USER_NOT_ENOUGH_TWO then
        g_toast.createToast(GameString.get('str_superLotto_money_not_enough'))
    else
        if type(value) == "table" then
            value = "type_table";
        end
        g_toast.createToast(GameString.get('str_superLotto_system_error'))
    end
end

function NormalRoomSceneCtr:lottoReward(value)
	Log.d('lottoReward',value)
    if(value ~= nil and value.uid == g_AccountInfo:getId()) then
    	g_PopupManager:show(g_PopupConfig.S_POPID.SUPER_LOTTO_REWARD_POP,value)
        g_Model:setData(g_ModelCmd.LOTTO_REWARD, nil);
    end
end

function NormalRoomSceneCtr:onSendChipActionFinish(data)
    if data.recieverSeatId == 10 then
    	Log.d('onSendChipActionFinish',data)
        self.m_userSendChipArray[data.senderSeatId] = self.m_userSendChipArray[data.senderSeatId] + 1;
        if self.m_userSendChipArray[data.senderSeatId] == 1
            or self.m_userSendChipArray[data.senderSeatId] % 5 == 0 then
            local sendSeat = SeatManager:getSeat(data.senderSeatId);
            if sendSeat and sendSeat:isEmpty() == false then
	            self.m_view:onShowDealerAction({["seatId"] = sendSeat:getSeatId() , ["userName"]= sendSeat:getName(), ["seatUid"] = sendSeat:getUid()})
	        end
        end
    end
end

return NormalRoomSceneCtr