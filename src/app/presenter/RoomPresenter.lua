---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MartinLai.
--- DateTime: 2019/1/25 10:08
--- 房间公共业务逻辑
local RoomPresenter = class("RoomPresenter")

RoomPresenter.SceneMap = {
	[g_RoomInfo.ROOM_TYPE_TOURNAMENT] = import("app.scenes.mttRoom").scene;
	[g_RoomInfo.ROOM_TYPE_KNOCKOUT] = import("app.scenes.sngRoom").SNGRoomScene;
	[g_RoomInfo.ROOM_TYPE_PRIVATE] = import("app.scenes.privateRoom").scene;
}

function RoomPresenter:toRoom(data)
	if type(data) ~= "table" then return end
	Log.d("RoomPresenter:toRoom",data.ip, data.port, data.tid, data.tableType,data)
	if data.ip == nil or data.port == nil then return end
	data.tableType = data.tableType or data.roomFlag

	if g_RoomInfo:isPrivateRoom(data.tid) then
		data.tableType = g_RoomInfo.ROOM_TYPE_PRIVATE
	end
	if data.tableType == g_RoomInfo.ROOM_TYPE_PRIVATE and not data.passwordChecked and not data.reconnect and not data.emptyPassword then
		local param = HttpCmd:getMethod(HttpCmd.s_cmds.SEARCH_ROOM)
		param.tid = data.tid
		g_HttpManager:doPost(param, self, function (self, isSuccess, roomInfo)
			if isSuccess and roomInfo and roomInfo[1] then
				data.emptyPassword = (roomInfo[1].flag == 8)
			end
			if data.emptyPassword then
				self:toRoom(data)
			else
				local PrivatePopType = import("app.scenes.privateHall").PrivatePopType
				g_PopupManager:show(g_PopupConfig.S_POPID.PRIVATE_HALL_POP, PrivatePopType.InputPassword, data)
			end
		end)
		return
	end
	
	local scene = RoomPresenter.SceneMap[data.tableType]
	if not scene then
		if data.tid == 0 then
			scene = import("app.scenes.mttRoom").scene
		else
			scene = import("app.scenes.normalRoom").scene
		end
	end
	
	local notImRoom = cc.Director:getInstance():getRunningScene():getName() ~= "RoomScene"
	if notImRoom then
		g_RoomInfo:setData(data)
		cc.Director:getInstance():pushScene(scene:create(data))
	else
		g_EventDispatcher:dispatch(g_SceneEvent.ROOM_PRE_SWITCH_ROOM, data)
	end
end

function RoomPresenter:replaceRoomScene(data)
	if type(data) ~= "table" then return end
	local scene = RoomPresenter.SceneMap[data.tableType]
	if not scene then
		scene = import("app.scenes.normalRoom").scene
	end
	g_RoomInfo:setData(data)
	cc.Director:getInstance():replaceScene(scene:create(data))
end

return RoomPresenter